# -*- coding: utf-8 -*-
"""Capstone_Serial.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bqMB12M_J4Bcib3lHmA9C5O0sDIDV320
"""

from datetime import date
import datetime
import csv
import pandas as pd
import math
import time
import matplotlib.pyplot as plt
import numpy as np
import statistics


# Function that calculate the number of days between a certain period
def numOfDays(date1, date2):
    return ((date2 - date1).days +1)

current_mean_temp = []
past_mean_temp = [[],[],[],[],[],[],[],[]]
average_list = []

# Display the current date
today = datetime.date.today() - datetime.timedelta(days=17)
print("Current date is: ", today)
# Set up the time for past week of 2021 ï¼ˆstart = 2021-02-17  to  end = 2021-02-23)
start_pastweek = today - datetime.timedelta(days=7)
end_pastweek = today - datetime.timedelta(days=1)
# Set up the time for past two weeks of 2020 (start = 2020-02-17  to end = 2020-03-01)
pastyear = today.replace(year=today.year - 1)
start_pastyear_passweek = pastyear - datetime.timedelta(days=7)
end_pastyear_passweek = pastyear + datetime.timedelta(days=6)
# Display the period (For data collection)
print(start_pastweek, " to ", end_pastweek)
print(start_pastyear_passweek, " to ", end_pastyear_passweek)
print("\n")

morning_hour = 6
afternoon_hour = 5
evening_hour = 4
early_night_hour = 3
late_night_hour = 6


firstday_of_thisyear = date(2021, 3, 1)
firstday_of_pastyear = date(2020, 3, 1)
start = date(2020,4,21)
end1 = date(2020,4,27)
end2 = date(2020,5,4)
cloud_c_data = date(2021,4,28)
comparision_data = date(2021,4,28)

 # Variation of data

def average_temp_variation(average_temp_list):
    x1 = 0
    x2 = 0
    dif = 0
    sum = 0
    variation = 0
    for x in range(6):
      x1  = average_temp_list[x]
      x2 = average_temp_list[x+1]
      dif = float(x1)-float(x2)
      sum = sum + dif
    variation = sum/6.0
    return variation

def average_dewp_variation(average_dewp_list):
    x1 = 0
    x2 = 0
    dif = 0
    sum = 0
    variation = 0
    for x in range(6):
      x1  = average_dewp_list[x]
      x2 = average_dewp_list[x+1]
      dif = float(x1)-float(x2)
      sum = sum + dif
    variation = sum/6.0
    return variation

def average_hum_variation(average_hum_list):
    x1 = 0
    x2 = 0
    dif = 0
    sum = 0
    variation = 0
    for x in range(6):
      x1  = average_hum_list[x]
      x2 = average_hum_list[x+1]
      dif = float(x1)-float(x2)
      sum = sum + dif
    variation = sum/6.0
    return variation

def c_average_temp_variation(average_temp_list):
    x1 = 0
    x2 = 0
    dif = 0
    sum = 0
    variation = 0
    for x in range(6):
      x1  = average_temp_list[x]
      x2 = average_temp_list[x+1]
      dif = float(x1)-float(x2)
      sum = sum + dif
    variation = sum/6.0
    return variation

def c_average_dewp_variation(average_dewp_list):
    x1 = 0
    x2 = 0
    dif = 0
    sum = 0
    variation = 0
    for x in range(6):
      x1  = average_dewp_list[x]
      x2 = average_dewp_list[x+1]
      dif = float(x1)-float(x2)
      sum = sum + dif
    variation = sum/6.0
    return variation

def c_average_hum_variation(average_hum_list):
    x1 = 0
    x2 = 0
    dif = 0
    sum = 0
    variation = 0
    for x in range(6):
      x1  = average_hum_list[x]
      x2 = average_hum_list[x+1]
      dif = float(x1)-float(x2)
      sum = sum + dif
    variation = sum/6.0
    return variation
#######################################################################################################################################################################
#Machine Learning for Dataset 1

data = pd.read_csv("https://raw.githubusercontent.com/navidharni/Capstone/main/Data_Logistic%20Regression_pt1_v3.csv") #pt1

#Standardization Function
def standardize(arr):
    return[(value - arr.mean())/arr.std() for value in arr]

#Extracting the features and target variables and standardizing features
features1 = data.iloc[:,1].copy()
target1 = data.iloc[:,2].copy()

features1 =np.array(features1)
target1 =target1.to_numpy()
#features = standardize(features)

#print(features1)
#print(target1)

theta1 = np.random.rand()
print(f'Random Theta1: {theta1}')
alpha = 0.001
epochs = 15000

x1 = features1
y1 = target1

# Training model
serial_time = time.time()
for i in range(epochs):
    sum = 0
    for l in range(len(x1)):
        z = np.sum(theta1*x1[l])
        hypothesis = (1/(1+np.e**(-1*z)))
        sum += (y1[l]- hypothesis)*x1[l]   
    theta1= (theta1+ alpha*(sum/len(x1)))
print(f"alpha:{alpha} , epochs:{epochs}\nfinal theta: {theta1}")
print("\nSerial Time--- %s seconds ---" % (time.time() - serial_time))
#Machine Learning for Dataset 2

data2 = pd.read_csv("https://raw.githubusercontent.com/navidharni/Capstone/main/Data_Logistic%20Regression_pt2_v4.csv") #pt2

#Extracting the features and target variables and standardizing features
features2 = data2.iloc[:,1].copy()
target2 = data2.iloc[:,2].copy()

features2 =np.array(features2)
target2 =target2.to_numpy()
#features = standardize(features)

#print(features2)
#print(target2)

theta2 = np.random.rand()
print(f'Random Theta2: {theta2}')
alpha = 0.001
epochs = 15000

x2 = features2
y2 = target2

# Training model
for i in range(epochs):
    sum = 0
    for l in range(len(x2)):
        z = np.sum(theta2*x2[l])
        hypothesis = (1/(1+np.e**(-1*z)))
        sum += (y2[l]- hypothesis)*x2[l]   
    theta2= (theta2+ alpha*(sum/len(x2)))
print(f"alpha:{alpha} , epochs:{epochs}\n final theta: {theta2}")


#################################################################################################################################################################
run = True
while (run):
          city = input("\nEnter the city name (T for Toronto, M for Montreal, O for Ottawa, W for Winnipeg, Q for quit):")
          if(city=="T"):
                start_time = time.time()
                # Collect past weeks data from current year (Hourly, total of 168 data)
                start_goal = date(start_pastweek.year,start_pastweek.month,start_pastweek.day)
                end_goal = date(end_pastweek.year,end_pastweek.month,end_pastweek.day)
                start3 = numOfDays(firstday_of_thisyear, start_goal)
                end3 = numOfDays(firstday_of_thisyear, end_goal)
                twenty_four_current_temp = []
                current_dew_point = []
                current_humidity = []
                with open("Toronto_2021_3&4.csv") as fd:
                    reader = csv.reader(fd)
                    data = [row for idx, row in enumerate(reader) if idx in range((start3-1)*24+1,(end3)*24+1) ]
                    for x in range(7*24):
                        twenty_four_current_temp.append(data[x][9])
                        current_dew_point.append(data[x][11])
                        current_humidity.append(data[x][13])

                # Collect past weeks data from past year (Hourly, total of 168 data)
                start_date = numOfDays(firstday_of_pastyear, start)
                end_date = numOfDays(firstday_of_pastyear, end1)
                yesterday_temp = []
                yesterday_dewpoints = []
                yesterday_humidity = []
                with open("Toronto_2020_3&4&5.csv") as fd:
                  reader = csv.reader(fd)
                  data = [row for idx, row in enumerate(reader) if idx in range(((start_date-1)*24+1),(end_date*24)+1) ]
                  for x in range(168): 
                    yesterday_temp.append(data[x][9])
                    yesterday_dewpoints.append(data[x][11])
                    yesterday_humidity.append(data[x][13])

                # Collect past two weeks data from past year (Hourly, total of 336 data)
                start_date = numOfDays(firstday_of_pastyear, start)
                end_date = numOfDays(firstday_of_pastyear, end2)
                temp = []
                dewpoints = []
                humidity = []
                pastyear_temp = []
                pastyear_dewpoints = []
                pastyear_humidity = []
                with open("Toronto_2020_3&4&5.csv") as fd:
                  reader = csv.reader(fd)
                  data = [row for idx, row in enumerate(reader) if idx in range(((start_date-1)*24+1),(end_date*24)+1) ]
                  for x in range(312):
                      pastyear_temp.append(data[x][9])
                      pastyear_dewpoints.append(data[x][11])
                      pastyear_humidity.append(data[x][13])
                  for x in range(13): 
                      sum1 = 0
                      sum2 = 0
                      sum3 = 0
                      average1 = 0
                      average2 = 0
                      average3 = 0
                      for y in range(24):
                          sum1 = sum1 + float(data[y+x*24][9])
                          sum2 = sum2 + float(data[y+x*24][11])
                          sum3 = sum3 + float(data[y+x*24][13])
                      average1 = sum1/24.0
                      average2 = sum2/24.0
                      average3 = sum3/24.0
                      temp.append(average1)
                      dewpoints.append(average2)
                      humidity.append(average3)   

                sum1 = 0
                sum2 = 0
                average1 = 0
                average2 = 0
                with open("Toronto_2020_3&4&5.csv") as fd:
                  reader = csv.reader(fd)
                  data = [row for idx, row in enumerate(reader) if idx in range(1,25) ]
                  for x in range(24):
                      pastyear_temp.append(data[x][9])
                      pastyear_dewpoints.append(data[x][11])
                      pastyear_humidity.append(data[x][13])
                  for y in range(24):
                      sum1 = sum1 + float(data[y][9])
                      sum2 = sum2 + float(data[y][11])
                      sum3 = sum3 + float(data[y][13])
                  average1 = sum1/24.0
                  average2 = sum2/24.0
                  average3 = sum3/24.0
                  temp.append(average1)
                  dewpoints.append(average2)
                  humidity.append(average3)

                temperature_window = [[],[],[],[],[],[],[],[]]
                dewpoints_window = [[],[],[],[],[],[],[],[]]
                humidity_window = [[],[],[],[],[],[],[],[]]
                counta = 0
                for x in range(8):
                  for y in range(7):
                    temperature_window[x].append(temp[y+counta])
                    dewpoints_window[x].append(dewpoints[y+counta])
                    humidity_window[x].append(humidity[y+counta])
                  counta = counta+1

                # Calculate Euclidean distance for each temperature window
                current_temp7 = []
                current_dew_point7  = []
                current_humidity7 = []
                sum1 = 0
                sum2 = 0
                sum3 = 0
                for y in range(7):
                  for x in range(24):
                    sum1 = sum1 + float(twenty_four_current_temp[x+y*24])
                    sum2 = sum2 + float(current_dew_point[x+y*24])
                    sum3 = sum3 + float(current_humidity[x+y*24])
                    average1 = sum1/24.0
                    average2 = sum2/24.0
                    average3 = sum3/24.0
                  current_temp7.append(average1)
                  current_dew_point7.append(average2)
                  current_humidity7.append(average3)
                  sum1 = 0
                  sum2 = 0
                  sum3 = 0
                temp_euclidean_distance = []
                dowpoints_euclidean_distance = []
                humidity_euclidean_distance = []
                for x in range(8):
                  window_sqr1 = 0
                  window_sqr2 = 0
                  window_sqr3 = 0
                  root1 = 0
                  root2 = 0
                  root3 = 0
                  sqr1 = 0
                  sqr2 = 0
                  sqr3 = 0
                  answer1 = 0
                  answer2 = 0
                  answer3 = 0
                  for y in range(7):
                    answer1 = float(current_temp7[y])-float(temperature_window[x][y])
                    answer2 = float(current_dew_point7[y])-float(dewpoints_window[x][y])
                    answer3 = float(current_humidity7[y])-float(humidity_window[x][y])
                    sqr1 = answer1*answer1
                    sqr2 = answer2*answer2
                    sqr3 = answer3*answer3
                    window_sqr1 = window_sqr1+sqr1
                    window_sqr2 = window_sqr2+sqr2
                    window_sqr3 = window_sqr3+sqr3
                  root1 = math.sqrt(window_sqr1)
                  root2 = math.sqrt(window_sqr2)
                  root3 = math.sqrt(window_sqr3)
                  temp_euclidean_distance.append(root1)
                  dowpoints_euclidean_distance.append(root2)
                  humidity_euclidean_distance.append(root3)

                # Base on the euclidean distance, find the index of the smallest euclidean distance
                index = 0
                min = temp_euclidean_distance[0]
                for x in range(len(temp_euclidean_distance)):
                  if temp_euclidean_distance[x]<min:
                    min = temp_euclidean_distance[x]
                  index = temp_euclidean_distance.index(min)
                  
                temp_window = index+1

                index = 0
                min = dowpoints_euclidean_distance[0]
                for x in range(len(dowpoints_euclidean_distance)):
                  if dowpoints_euclidean_distance[x]<min:
                    min = dowpoints_euclidean_distance[x]
                  index = dowpoints_euclidean_distance.index(min)
                  
                dew_window = index+1

                index = 0
                min = humidity_euclidean_distance[0]
                for x in range(len(humidity_euclidean_distance)):
                  if humidity_euclidean_distance[x]<min:
                    min = humidity_euclidean_distance[x]
                  index = humidity_euclidean_distance.index(min)

                hum_window = index+1

                # Average of data (temperature, dew points, humidity) 2020
                def average_temp_data(start, period):
                  sum = 0
                  average_list = []
                  average_list.clear()
                  average = 0
                  a = 0
                  for x in range(7):
                    for y in range(period):
                      a = pastyear_temp[y+start+(x*24)+(temp_window-1)*24]
                      sum = sum+float(a)
                    average = sum/period
                    average_list.append(average)
                    sum = 0
                    average = 0
                  return average_list

                def average_dewp_data(start, period):
                  sum = 0
                  average_list = []
                  average_list.clear()
                  average = 0
                  a = 0
                  for x in range(7):
                    for y in range(period):
                      a = pastyear_dewpoints[y+start+(x*24)+(dew_window-1)*24]
                      sum = sum+float(a)
                    average = sum/period
                    average_list.append(average)
                    sum = 0
                    average = 0
                  return average_list

                def average_hum_data(start, period):
                  sum = 0
                  average_list = []
                  average_list.clear()
                  average = 0
                  a = 0
                  for x in range(7):
                    for y in range(period):
                      a = pastyear_humidity[y+start+(x*24)+(hum_window-1)*24]
                      sum = sum+float(a)
                    average = sum/period
                    average_list.append(average)
                    sum = 0
                    average = 0
                  return average_list

                average_listm1 = average_temp_data(6,morning_hour)
                average_listm2 = average_dewp_data(6,morning_hour)
                average_listm3 = average_hum_data(6,morning_hour)

                average_lista1 = average_temp_data(12,afternoon_hour)
                average_lista2 = average_dewp_data(12,afternoon_hour)
                average_lista3 = average_hum_data(12,afternoon_hour)

                average_liste1 = average_temp_data(17,evening_hour)
                average_liste2 = average_dewp_data(17,evening_hour)
                average_liste3 = average_hum_data(17,evening_hour)

                average_listen1 = average_temp_data(21,early_night_hour)
                average_listen2 = average_dewp_data(21,early_night_hour)
                average_listen3 = average_hum_data(21,early_night_hour)

                average_listln1 = average_temp_data(0,late_night_hour)
                average_listln2 = average_dewp_data(0,late_night_hour)
                average_listln3 = average_hum_data(0,late_night_hour)

                # Average of data (temperature, dew points, humidity) 2021

                def c_average_temp_data(start, period):
                  sum = 0
                  average_list = []
                  average_list.clear()
                  average = 0
                  a = 0
                  for x in range(7):
                    for y in range(period):
                      a = twenty_four_current_temp[start+y+(x*24)]
                      sum = sum+float(a)
                    average = sum/period
                    average_list.append(average)
                    sum = 0
                    average = 0
                  return average_list

                def c_average_dewp_data(start, period):
                  sum = 0
                  average_list = []
                  average_list.clear()
                  average = 0
                  a = 0
                  for x in range(7):
                    for y in range(period):
                      a = current_dew_point[start+y+(x*24)]
                      sum = sum+float(a)
                    average = sum/period
                    average_list.append(average)
                    sum = 0
                    average = 0
                  return average_list

                def c_average_hum_data(start, period):
                  sum = 0
                  average_list = []
                  average_list.clear()
                  average = 0
                  a = 0
                  for x in range(7):
                    for y in range(period):
                      a = current_humidity[start+y+(x*24)]
                      sum = sum+float(a)
                    average = sum/period
                    average_list.append(average)
                    sum = 0
                    average = 0
                  return average_list

                c_average_listm1 = c_average_temp_data(6,morning_hour)
                c_average_listm2 = c_average_dewp_data(6,morning_hour)
                c_average_listm3 = c_average_hum_data(6,morning_hour)

                c_average_lista1 = c_average_temp_data(12,afternoon_hour)
                c_average_lista2 = c_average_dewp_data(12,afternoon_hour)
                c_average_lista3 = c_average_hum_data(12,afternoon_hour)

                c_average_liste1 = c_average_temp_data(17,evening_hour)
                c_average_liste2 = c_average_dewp_data(17,evening_hour)
                c_average_liste3 = c_average_hum_data(17,evening_hour)

                c_average_listen1 = c_average_temp_data(21,early_night_hour)
                c_average_listen2 = c_average_dewp_data(21,early_night_hour)
                c_average_listen3 = c_average_hum_data(21,early_night_hour)

                c_average_listln1 = c_average_temp_data(0,late_night_hour)
                c_average_listln2 = c_average_dewp_data(0,late_night_hour)
                c_average_listln3 = c_average_hum_data(0,late_night_hour)

                # Prediction
                def temp_prediction(past__t_v,current_t_v,start,period):
                  sum = 0
                  average = 0 
                  prediction_data = 0
                  variation = (past__t_v + current_t_v)/2.0
                  for x in range(period):
                    prediction_data = float(twenty_four_current_temp[24*6+start+x])
                    sum = sum + prediction_data
                  average = sum/period
                  preduction_data = average + variation
                  return preduction_data

                def dewp_prediction(past__d_v,current_d_v,start,period):
                  sum = 0
                  average = 0 
                  prediction_data = 0
                  variation = (past__d_v + current_d_v)/2.0
                  for x in range(period):
                    prediction_data = float(current_dew_point[24*6+start+x])
                    sum = sum + prediction_data
                  average = sum/period
                  preduction_data = average + variation
                  return preduction_data

                def hum_prediction(past__h_v,current_h_v,start,period):
                  sum = 0
                  average = 0 
                  prediction_data = 0
                  variation = (past__h_v + current_h_v)/2.0
                  for x in range(period):
                    prediction_data = float(current_humidity[24*6+start+x])
                    sum = sum + prediction_data
                  average = sum/period
                  preduction_data = average + variation
                  return preduction_data

                ptm = temp_prediction(average_temp_variation(average_listm1),c_average_temp_variation(c_average_listm1),6,morning_hour)
                pdm = dewp_prediction(average_dewp_variation(average_listm2),c_average_dewp_variation(c_average_listm2),6,morning_hour)
                phm = hum_prediction(average_hum_variation(average_listm3),c_average_hum_variation(c_average_listm3),6,morning_hour)

                pta = temp_prediction(average_temp_variation(average_lista1),c_average_temp_variation(c_average_lista1),12,afternoon_hour)
                pda = dewp_prediction(average_dewp_variation(average_lista2),c_average_dewp_variation(c_average_lista2),12,afternoon_hour)
                pha = hum_prediction(average_hum_variation(average_lista3),c_average_hum_variation(c_average_lista3),12,afternoon_hour)

                pte = temp_prediction(average_temp_variation(average_liste1),c_average_temp_variation(c_average_liste1),17,evening_hour)
                pde = dewp_prediction(average_dewp_variation(average_liste2),c_average_dewp_variation(c_average_liste2),17,evening_hour)
                phe = hum_prediction(average_hum_variation(average_liste3),c_average_hum_variation(c_average_liste3),17,evening_hour)

                pten = temp_prediction(average_temp_variation(average_listen1),c_average_temp_variation(c_average_listen1),21,early_night_hour)
                pden = dewp_prediction(average_dewp_variation(average_listen2),c_average_dewp_variation(c_average_listen2),21,early_night_hour)
                phen = hum_prediction(average_hum_variation(average_listen3),c_average_hum_variation(c_average_listen3),21,early_night_hour)

                ptln = temp_prediction(average_temp_variation(average_listln1),c_average_temp_variation(c_average_listln1),0,late_night_hour)
                pdln = dewp_prediction(average_dewp_variation(average_listln2),c_average_dewp_variation(c_average_listln2),0,late_night_hour)
                phln = hum_prediction(average_hum_variation(average_listln3),c_average_hum_variation(c_average_listln3),0,late_night_hour)

                print("The predicition temeperature for morning: " + str(ptm))
                print("The predicition dew point for morning: " + str(pdm))
                print("The predicition humnidity for morning: " + str(phm))

                print("The predicition temeperature for afternoon: " + str(pta))
                print("The predicition dew point for afternoon: " + str(pda))
                print("The predicition humnidity for afternoon: " + str(pha))

                print("The predicition temeperature for evening: " + str(pte))
                print("The predicition dew point for evening: " + str(pde))
                print("The predicition humnidity for evening: " + str(phe))

                print("The predicition temeperature for early night: " + str(pten))
                print("The predicition dew point for early night: " + str(pden))
                print("The predicition humnidity for early night: " + str(phen))

                print("The predicition temeperature for late night: " + str(ptln))
                print("The predicition dew point for late night: " + str(pdln))
                print("The predicition humnidity for late night: " + str(phln))

                # Collect cloud coverage and preciptation percent
                start_date = numOfDays(firstday_of_thisyear, cloud_c_data)
                end_date = numOfDays(firstday_of_thisyear, cloud_c_data)
                cloud_coverage = []
                preciptation_percent = []
                with open("Toronto_2021_3&4.csv") as fd:
                  reader = csv.reader(fd)
                  data = [row for idx, row in enumerate(reader) if idx in range(((start_date-1)*24+1),(end_date*24)+1) ]
                  for x in range(24): 
                    cloud_coverage.append(data[x][24])
                    preciptation_percent.append(data[x][25])

                sum = 0
                sum1 = 0
                latecloud_average = 0
                latepre_average = 0
                for x in range(late_night_hour):
                  sum = sum + float(cloud_coverage[x])
                  sum1 = sum1 + float(preciptation_percent[x])
                latecloud_average = sum/late_night_hour
                latepre_average = sum1/late_night_hour
                print("The cloud coverage for late night is: " + str(round(latecloud_average)))
                print("The preciptation percent for late night is: " + str(latepre_average))

                if (latepre_average < 30):
                  z1 = theta1*(latecloud_average-3.5)
                  h1 = (1/(1+np.e**(-1*z1)))
                  if (h1 >= 0.5):
                    print("It is very cloudy!")
                  else:
                    print("Clear skies or partly cloudy!")  

                else:
                  z2 = theta2*(latecloud_average-6.5)
                  h2 = (1/(1+np.e**(-1*z2)))
                  if (ptln <= 0):
                    if (h2 >= 0.5):
                      print("It is heavily snowing!")
                    else:
                      print("It is lightly snowing!")  
                  else:
                    if (h2>0.5):
                      print("It is heavily raining!")
                    else:
                      print("It is lightly raining!")  

                sum = 0
                sum1 = 0
                morningcloud_average = 0
                morningpre_average = 0
                for x in range(morning_hour):
                  sum = sum + float(cloud_coverage[6+x])
                  sum1 = sum1 + float(preciptation_percent[6+x])
                morningcloud_average = sum/morning_hour
                morningpre_average = sum1/morning_hour
                print("The cloud coverage for morning is: " + str(round(morningcloud_average)))
                print("The preciptation percent for morning is: " + str(morningpre_average))

                if (morningpre_average < 30):
                  z1 = theta1*(morningcloud_average -3.5)
                  h1 = (1/(1+np.e**(-1*z1)))
                  if (h1 >= 0.5):
                    print("It is very cloudy!")
                  else:
                    print("It is sunny or partly cloudy!")  

                else:
                  z2 = theta2*(morningcloud_average -6.5)
                  h2 = (1/(1+np.e**(-1*z2)))
                  if (ptm <= 0):
                    if (h2 >= 0.5):
                      print("It is heavily snowing!")
                    else:
                      print("It is lightly snowing!")  
                  else:
                    if (h2>0.5):
                      print("It is heavily raining!")
                    else:
                      print("It is lightly raining!")                 

                sum = 0
                sum1 = 0
                aftercloud_average = 0
                afterpre_average = 0
                for x in range(afternoon_hour):
                  sum = sum + float(cloud_coverage[12+x])
                  sum1 = sum1 + float(preciptation_percent[12+x])
                aftercloud_average = sum/afternoon_hour
                afterpre_average = sum1/afternoon_hour
                print("The cloud coverage for afternoon is: " + str(round(aftercloud_average)))
                print("The preciptation percent for afternoon is: " + str(afterpre_average))

                if (afterpre_average < 30):
                  z1 = theta1*(aftercloud_average -3.5)
                  h1 = (1/(1+np.e**(-1*z1)))
                  if (h1 >= 0.5):
                    print("It is very cloudy!")
                  else:
                    print("It is sunny or partly cloudy!")    

                else:
                  z2 = theta2*(aftercloud_average -6.5)
                  h2 = (1/(1+np.e**(-1*z2)))
                  if (pta <= 0):
                    if (h2 >= 0.5):
                      print("It is heavily snowing!")
                    else:
                      print("It is lightly snowing!")  
                  else:
                    if (h2>0.5):
                      print("It is heavily raining!")
                    else:
                      print("It is lightly raining!") 

                sum = 0
                sum1 = 0
                evencloud_average = 0
                evenpre_average = 0
                for x in range(evening_hour):
                  sum = sum + float(cloud_coverage[17+x])
                  sum1 = sum1 + float(preciptation_percent[17+x])
                evencloud_average = sum/evening_hour
                evenpre_average = sum1/evening_hour
                print("The cloud coverage for evening is: " + str(round(evencloud_average)))
                print("The preciptation percent for evening is: " + str(evenpre_average))

                if (evenpre_average < 30):
                  z1 = theta1*(evencloud_average -3.5)
                  h1 = (1/(1+np.e**(-1*z1)))
                  if (h1 >= 0.5):
                    print("It is very cloudy!")
                  else:
                    print("It is sunny or partly cloudy!")    

                else:
                  z2 = theta2*(evencloud_average -6.5)
                  h2 = (1/(1+np.e**(-1*z2)))
                  if (pte <= 0):
                    if (h2 >= 0.5):
                      print("It is heavily snowing!")
                    else:
                      print("It is lightly snowing!")  
                  else:
                    if (h2>0.5):
                      print("It is heavily raining!")
                    else:
                      print("It is lightly raining!") 

                sum = 0
                sum1 = 0
                earlycloud_average = 0
                earlypre_average = 0
                for x in range(early_night_hour):
                  sum = sum + float(cloud_coverage[21+x])
                  sum1 = sum1 + float(preciptation_percent[21+x])
                earlycloud_average = sum/early_night_hour
                earlypre_average = sum1/early_night_hour
                print("The cloud coverage for early night is: " + str(round(earlycloud_average)))
                print("The preciptation percent for early night is: " + str(earlypre_average))

                if (earlypre_average < 30):
                  z1 = theta1*(earlycloud_average -3.5)
                  h1 = (1/(1+np.e**(-1*z1)))
                  if (h1 >= 0.5):
                    print("It is very cloudy!")
                  else:
                    print("Clear skies or partly cloudy!")   

                else:
                  z2 = theta2*(earlycloud_average-6.5)
                  h2 = (1/(1+np.e**(-1*z2)))
                  if (pten <= 0):
                    if (h2 >= 0.5):
                      print("It is heavily snowing!")
                    else:
                      print("It is lightly snowing!")  
                  else:
                    if (h2>0.5):
                      print("It is heavily raining!")
                    else:
                      print("It is lightly raining!") 

                # Collect todays data for comparesion
                start_date = numOfDays(firstday_of_thisyear, comparision_data)
                end_date = numOfDays(firstday_of_thisyear, comparision_data)
                today_temp = []
                today_dewpoints = []
                today_humidity = []
                with open("Toronto_2021_3&4.csv") as fd:
                  reader = csv.reader(fd)
                  data = [row for idx, row in enumerate(reader) if idx in range(((start_date-1)*24+1),(end_date*24)+1) ]
                  for x in range(24): 
                    today_temp.append(data[x][9])
                    today_dewpoints.append(data[x][11])
                    today_humidity.append(data[x][13])

                def average_T(start, period):
                  sum = 0
                  average_list = []
                  average_list.clear()
                  average = 0
                  a = 0
                  for x in range(period):
                    a = today_temp[start+x]
                    sum = sum+float(a)
                  average = sum/period
                  average_list.append(average)
                  sum = 0
                  average = 0
                  return average_list

                def average_D(start, period):
                  sum = 0
                  average_list = []
                  average_list.clear()
                  average = 0
                  a = 0
                  for x in range(period):
                    a = today_dewpoints[start+x]
                    sum = sum+float(a)
                  average = sum/period
                  average_list.append(average)
                  sum = 0
                  average = 0
                  return average_list

                def average_H(start, period):
                  sum = 0
                  average_list = []
                  average_list.clear()
                  average = 0
                  a = 0
                  for x in range(period):
                    a = today_humidity[start+x]
                    sum = sum+float(a)
                  average = sum/period
                  average_list.append(average)
                  sum = 0
                  average = 0
                  return average_list

                average_listm1 = average_T(6,morning_hour)
                average_listm2 = average_D(6,morning_hour)
                average_listm3 = average_H(6,morning_hour)

                average_lista1 = average_T(12,afternoon_hour)
                average_lista2 = average_D(12,afternoon_hour)
                average_lista3 = average_H(12,afternoon_hour)

                average_liste1 = average_T(17,evening_hour)
                average_liste2 = average_D(17,evening_hour)
                average_liste3 = average_H(17,evening_hour)

                average_listen1 = average_T(21,early_night_hour)
                average_listen2 = average_D(21,early_night_hour)
                average_listen3 = average_H(21,early_night_hour)

                average_listln1 = average_T(0,late_night_hour)
                average_listln2 = average_D(0,late_night_hour)
                average_listln3 = average_H(0,late_night_hour)

                print(f'Morning temperature: prediction: {ptm}, Actual: {average_listm1[0]}, Accuary percent: {abs(100 - abs(((ptm-average_listm1[0])/(average_listm1[0]))) * 100.0)}')
                print(f'Morning dewpoint: prediction: {pdm}, Actual: {average_listm2[0]}, Accuary percent: {abs(100 -  abs(((pdm-average_listm2[0])/(average_listm2[0]))) * 100.0)}')
                print(f'Morning hummidity: prediction: {phm}, Actual: {average_listm3[0]}, Accuary percent: {abs(100 - abs(((phm-average_listm3[0])/(average_listm3[0]))) * 100.0)}')
                print("")
                print(f'Afternoon temperature: prediction: {pta}, Actual: {average_lista1[0]}, Accuary percent: {abs(100 - abs(((pta-average_lista1[0])/(average_lista1[0]))) * 100.0)}')
                print(f'Afternoon dewpoint: prediction: {pda}, Actual: {average_lista2[0]}, Accuary percent: {abs(100 - abs(((pda-average_lista2[0])/(average_lista2[0]))) * 100.0)}')
                print(f'Afternoon hummidity: prediction: {pha}, Actual: {average_lista3[0]}, Accuary percent: {abs(100 - abs(((pha-average_lista3[0])/(average_lista3[0]))) * 100.0)}')
                print("")
                print(f'Evening temperature: prediction: {pte}, Actual: {average_liste1[0]}, Accuary percent: {abs(100 - abs(((pte-average_liste1[0])/(average_liste1[0]))) * 100.0)}')
                print(f'Evening dewpoint: prediction: {pde}, Actual: {average_liste2[0]}, Accuary percent: {abs(100 - abs(((pde-average_liste2[0])/(average_liste2[0]))) * 100.0)}')
                print(f'Evening hummidity: prediction: {phe}, Actual: {average_liste3[0]}, Accuary percent: {abs(100 - abs(((phe-average_liste3[0])/(average_liste3[0]))) * 100.0)}')
                print("")
                print(f'Early night temperature: prediction: {pten}, Actual: {average_listen1[0]}, Accuary percent: {abs(100 - abs(((pten-average_listen1[0])/(average_listen1[0]))) * 100.0)}')
                print(f'Early night dewpoint: prediction: {pden}, Actual: {average_listen2[0]}, Accuary percent: {abs(100 - abs(((pden-average_listen2[0])/(average_listen2[0]))) * 100.0)}')
                print(f'Early night hummidity: prediction: {phen}, Actual: {average_listen3[0]}, Accuary percent: {abs(100 - abs(((phen-average_listen3[0])/(average_listen3[0]))) * 100.0)}')
                print("")
                print(f'Late night temperature: prediction: {ptln}, Actual: {average_listln1[0]}, Accuary percent: {abs(100 - abs(((ptln-average_listln1[0])/(average_listln1[0]))) * 100.0)}')
                print(f'Late night dewpoint: prediction: {pdln}, Actual: {average_listln2[0]}, Accuary percent: {abs(100 - abs(((pdln-average_listln2[0])/(average_listln2[0]))) * 100.0)}')
                print(f'Late night hummidity: prediction: {phln}, Actual: {average_listln3[0]}, Accuary percent: {abs(100 - abs(((phln-average_listln3[0])/(average_listln3[0]))) * 100.0)}')
                print("")

                print("--- %s seconds ---" % (time.time() - start_time))
###################################################################################################################################################################
          elif (city == "M"):
                start_time = time.time()
                # Collect past weeks data from current year (Hourly, total of 168 data)
                start_goal = date(start_pastweek.year,start_pastweek.month,start_pastweek.day)
                end_goal = date(end_pastweek.year,end_pastweek.month,end_pastweek.day)
                start3 = numOfDays(firstday_of_thisyear, start_goal)
                end3 = numOfDays(firstday_of_thisyear, end_goal)
                twenty_four_current_temp = []
                current_dew_point = []
                current_humidity = []
                with open("Montreal_2021_3&4.csv") as fd:
                    reader = csv.reader(fd)
                    data = [row for idx, row in enumerate(reader) if idx in range((start3-1)*24+1,(end3)*24+1) ]
                    for x in range(7*24):
                        twenty_four_current_temp.append(data[x][9])
                        current_dew_point.append(data[x][11])
                        current_humidity.append(data[x][13])

                # Collect past weeks data from past year (Hourly, total of 168 data)
                start_date = numOfDays(firstday_of_pastyear, start)
                end_date = numOfDays(firstday_of_pastyear, end1)
                yesterday_temp = []
                yesterday_dewpoints = []
                yesterday_humidity = []
                with open("Montreal_2020_3&4&5.csv") as fd:
                  reader = csv.reader(fd)
                  data = [row for idx, row in enumerate(reader) if idx in range(((start_date-1)*24+1),(end_date*24)+1) ]
                  for x in range(168): 
                    yesterday_temp.append(data[x][9])
                    yesterday_dewpoints.append(data[x][11])
                    yesterday_humidity.append(data[x][13])

                # Collect past two weeks data from past year (Hourly, total of 336 data)
                start_date = numOfDays(firstday_of_pastyear, start)
                end_date = numOfDays(firstday_of_pastyear, end2)
                temp = []
                dewpoints = []
                humidity = []
                pastyear_temp = []
                pastyear_dewpoints = []
                pastyear_humidity = []
                with open("Montreal_2020_3&4&5.csv") as fd:
                  reader = csv.reader(fd)
                  data = [row for idx, row in enumerate(reader) if idx in range(((start_date-1)*24+1),(end_date*24)+1) ]
                  for x in range(312):
                      pastyear_temp.append(data[x][9])
                      pastyear_dewpoints.append(data[x][11])
                      pastyear_humidity.append(data[x][13])
                  for x in range(13): 
                      sum1 = 0
                      sum2 = 0
                      sum3 = 0
                      average1 = 0
                      average2 = 0
                      average3 = 0
                      for y in range(24):
                          sum1 = sum1 + float(data[y+x*24][9])
                          sum2 = sum2 + float(data[y+x*24][11])
                          sum3 = sum3 + float(data[y+x*24][13])
                      average1 = sum1/24.0
                      average2 = sum2/24.0
                      average3 = sum3/24.0
                      temp.append(average1)
                      dewpoints.append(average2)
                      humidity.append(average3)
                  

                sum1 = 0
                sum2 = 0
                average1 = 0
                average2 = 0
                with open("Montreal_2020_3&4&5.csv") as fd:
                  reader = csv.reader(fd)
                  data = [row for idx, row in enumerate(reader) if idx in range(1,25) ]
                  for x in range(24):
                      pastyear_temp.append(data[x][9])
                      pastyear_dewpoints.append(data[x][11])
                      pastyear_humidity.append(data[x][13])
                  for y in range(24):
                      sum1 = sum1 + float(data[y][9])
                      sum2 = sum2 + float(data[y][11])
                      sum3 = sum3 + float(data[y][13])
                  average1 = sum1/24.0
                  average2 = sum2/24.0
                  average3 = sum3/24.0
                  temp.append(average1)
                  dewpoints.append(average2)
                  humidity.append(average3)

                temperature_window = [[],[],[],[],[],[],[],[]]
                dewpoints_window = [[],[],[],[],[],[],[],[]]
                humidity_window = [[],[],[],[],[],[],[],[]]
                counta = 0
                for x in range(8):
                  for y in range(7):
                    temperature_window[x].append(temp[y+counta])
                    dewpoints_window[x].append(dewpoints[y+counta])
                    humidity_window[x].append(humidity[y+counta])
                  counta = counta+1

                # Calculate Euclidean distance for each temperature window
                current_temp7 = []
                current_dew_point7  = []
                current_humidity7 = []
                sum1 = 0
                sum2 = 0
                sum3 = 0
                for y in range(7):
                  for x in range(24):
                    sum1 = sum1 + float(twenty_four_current_temp[x+y*24])
                    sum2 = sum2 + float(current_dew_point[x+y*24])
                    sum3 = sum3 + float(current_humidity[x+y*24])
                    average1 = sum1/24.0
                    average2 = sum2/24.0
                    average3 = sum3/24.0
                  current_temp7.append(average1)
                  current_dew_point7.append(average2)
                  current_humidity7.append(average3)
                  sum1 = 0
                  sum2 = 0
                  sum3 = 0
                temp_euclidean_distance = []
                dowpoints_euclidean_distance = []
                humidity_euclidean_distance = []
                for x in range(8):
                  window_sqr1 = 0
                  window_sqr2 = 0
                  window_sqr3 = 0
                  root1 = 0
                  root2 = 0
                  root3 = 0
                  sqr1 = 0
                  sqr2 = 0
                  sqr3 = 0
                  answer1 = 0
                  answer2 = 0
                  answer3 = 0
                  for y in range(7):
                    answer1 = float(current_temp7[y])-float(temperature_window[x][y])
                    answer2 = float(current_dew_point7[y])-float(dewpoints_window[x][y])
                    answer3 = float(current_humidity7[y])-float(humidity_window[x][y])
                    sqr1 = answer1*answer1
                    sqr2 = answer2*answer2
                    sqr3 = answer3*answer3
                    window_sqr1 = window_sqr1+sqr1
                    window_sqr2 = window_sqr2+sqr2
                    window_sqr3 = window_sqr3+sqr3
                  root1 = math.sqrt(window_sqr1)
                  root2 = math.sqrt(window_sqr2)
                  root3 = math.sqrt(window_sqr3)
                  temp_euclidean_distance.append(root1)
                  dowpoints_euclidean_distance.append(root2)
                  humidity_euclidean_distance.append(root3)


                # Base on the euclidean distance, find the index of the smallest euclidean distance
                index = 0
                min = temp_euclidean_distance[0]
                for x in range(len(temp_euclidean_distance)):
                  if temp_euclidean_distance[x]<min:
                    min = temp_euclidean_distance[x]
                  index = temp_euclidean_distance.index(min)
                  
                temp_window = index+1


                index = 0
                min = dowpoints_euclidean_distance[0]
                for x in range(len(dowpoints_euclidean_distance)):
                  if dowpoints_euclidean_distance[x]<min:
                    min = dowpoints_euclidean_distance[x]
                  index = dowpoints_euclidean_distance.index(min)
                  
                dew_window = index+1

                index = 0
                min = humidity_euclidean_distance[0]
                for x in range(len(humidity_euclidean_distance)):
                  if humidity_euclidean_distance[x]<min:
                    min = humidity_euclidean_distance[x]
                  index = humidity_euclidean_distance.index(min)

                hum_window = index+1

                # Average of data (temperature, dew points, humidity) 2020

                def average_temp_data(start, period):
                  sum = 0
                  average_list = []
                  average_list.clear()
                  average = 0
                  a = 0
                  for x in range(7):
                    for y in range(period):
                      a = pastyear_temp[y+start+(x*24)+(temp_window-1)*24]
                      sum = sum+float(a)
                    average = sum/period
                    average_list.append(average)
                    sum = 0
                    average = 0
                  return average_list

                def average_dewp_data(start, period):
                  sum = 0
                  average_list = []
                  average_list.clear()
                  average = 0
                  a = 0
                  for x in range(7):
                    for y in range(period):
                      a = pastyear_dewpoints[y+start+(x*24)+(dew_window-1)*24]
                      sum = sum+float(a)
                    average = sum/period
                    average_list.append(average)
                    sum = 0
                    average = 0
                  return average_list

                def average_hum_data(start, period):
                  sum = 0
                  average_list = []
                  average_list.clear()
                  average = 0
                  a = 0
                  for x in range(7):
                    for y in range(period):
                      a = pastyear_humidity[y+start+(x*24)+(hum_window-1)*24]
                      sum = sum+float(a)
                    average = sum/period
                    average_list.append(average)
                    sum = 0
                    average = 0
                  return average_list

                morning_hour = 6
                afternoon_hour = 5
                evening_hour = 4
                early_night_hour = 3
                late_night_hour = 6

                average_listm1 = average_temp_data(6,morning_hour)
                average_listm2 = average_dewp_data(6,morning_hour)
                average_listm3 = average_hum_data(6,morning_hour)

                average_lista1 = average_temp_data(12,afternoon_hour)
                average_lista2 = average_dewp_data(12,afternoon_hour)
                average_lista3 = average_hum_data(12,afternoon_hour)

                average_liste1 = average_temp_data(17,evening_hour)
                average_liste2 = average_dewp_data(17,evening_hour)
                average_liste3 = average_hum_data(17,evening_hour)

                average_listen1 = average_temp_data(21,early_night_hour)
                average_listen2 = average_dewp_data(21,early_night_hour)
                average_listen3 = average_hum_data(21,early_night_hour)

                average_listln1 = average_temp_data(0,late_night_hour)
                average_listln2 = average_dewp_data(0,late_night_hour)
                average_listln3 = average_hum_data(0,late_night_hour)

                # Average of data (temperature, dew points, humidity) 2021

                def c_average_temp_data(start, period):
                  sum = 0
                  average_list = []
                  average_list.clear()
                  average = 0
                  a = 0
                  for x in range(7):
                    for y in range(period):
                      a = twenty_four_current_temp[start+y+(x*24)]
                      sum = sum+float(a)
                    average = sum/period
                    average_list.append(average)
                    sum = 0
                    average = 0
                  return average_list

                def c_average_dewp_data(start, period):
                  sum = 0
                  average_list = []
                  average_list.clear()
                  average = 0
                  a = 0
                  for x in range(7):
                    for y in range(period):
                      a = current_dew_point[start+y+(x*24)]
                      sum = sum+float(a)
                    average = sum/period
                    average_list.append(average)
                    sum = 0
                    average = 0
                  return average_list

                def c_average_hum_data(start, period):
                  sum = 0
                  average_list = []
                  average_list.clear()
                  average = 0
                  a = 0
                  for x in range(7):
                    for y in range(period):
                      a = current_humidity[start+y+(x*24)]
                      sum = sum+float(a)
                    average = sum/period
                    average_list.append(average)
                    sum = 0
                    average = 0
                  return average_list

                c_average_listm1 = c_average_temp_data(6,morning_hour)
                c_average_listm2 = c_average_dewp_data(6,morning_hour)
                c_average_listm3 = c_average_hum_data(6,morning_hour)

                c_average_lista1 = c_average_temp_data(12,afternoon_hour)
                c_average_lista2 = c_average_dewp_data(12,afternoon_hour)
                c_average_lista3 = c_average_hum_data(12,afternoon_hour)

                c_average_liste1 = c_average_temp_data(17,evening_hour)
                c_average_liste2 = c_average_dewp_data(17,evening_hour)
                c_average_liste3 = c_average_hum_data(17,evening_hour)

                c_average_listen1 = c_average_temp_data(21,early_night_hour)
                c_average_listen2 = c_average_dewp_data(21,early_night_hour)
                c_average_listen3 = c_average_hum_data(21,early_night_hour)

                c_average_listln1 = c_average_temp_data(0,late_night_hour)
                c_average_listln2 = c_average_dewp_data(0,late_night_hour)
                c_average_listln3 = c_average_hum_data(0,late_night_hour)

                # Prediction

                def temp_prediction(past__t_v,current_t_v,start,period):
                  sum = 0
                  average = 0 
                  prediction_data = 0
                  variation = (past__t_v + current_t_v)/2.0
                  for x in range(period):
                    prediction_data = float(twenty_four_current_temp[24*6+start+x])
                    sum = sum + prediction_data
                  average = sum/period
                  preduction_data = average + variation
                  return preduction_data

                def dewp_prediction(past__d_v,current_d_v,start,period):
                  sum = 0
                  average = 0 
                  prediction_data = 0
                  variation = (past__d_v + current_d_v)/2.0
                  for x in range(period):
                    prediction_data = float(current_dew_point[24*6+start+x])
                    sum = sum + prediction_data
                  average = sum/period
                  preduction_data = average + variation
                  return preduction_data

                def hum_prediction(past__h_v,current_h_v,start,period):
                  sum = 0
                  average = 0 
                  prediction_data = 0
                  variation = (past__h_v + current_h_v)/2.0
                  for x in range(period):
                    prediction_data = float(current_humidity[24*6+start+x])
                    sum = sum + prediction_data
                  average = sum/period
                  preduction_data = average + variation
                  return preduction_data

                ptm = temp_prediction(average_temp_variation(average_listm1),c_average_temp_variation(c_average_listm1),6,morning_hour)
                pdm = dewp_prediction(average_dewp_variation(average_listm2),c_average_dewp_variation(c_average_listm2),6,morning_hour)
                phm = hum_prediction(average_hum_variation(average_listm3),c_average_hum_variation(c_average_listm3),6,morning_hour)

                pta = temp_prediction(average_temp_variation(average_lista1),c_average_temp_variation(c_average_lista1),12,afternoon_hour)
                pda = dewp_prediction(average_dewp_variation(average_lista2),c_average_dewp_variation(c_average_lista2),12,afternoon_hour)
                pha = hum_prediction(average_hum_variation(average_lista3),c_average_hum_variation(c_average_lista3),12,afternoon_hour)

                pte = temp_prediction(average_temp_variation(average_liste1),c_average_temp_variation(c_average_liste1),17,evening_hour)
                pde = dewp_prediction(average_dewp_variation(average_liste2),c_average_dewp_variation(c_average_liste2),17,evening_hour)
                phe = hum_prediction(average_hum_variation(average_liste3),c_average_hum_variation(c_average_liste3),17,evening_hour)

                pten = temp_prediction(average_temp_variation(average_listen1),c_average_temp_variation(c_average_listen1),21,early_night_hour)
                pden = dewp_prediction(average_dewp_variation(average_listen2),c_average_dewp_variation(c_average_listen2),21,early_night_hour)
                phen = hum_prediction(average_hum_variation(average_listen3),c_average_hum_variation(c_average_listen3),21,early_night_hour)

                ptln = temp_prediction(average_temp_variation(average_listln1),c_average_temp_variation(c_average_listln1),0,late_night_hour)
                pdln = dewp_prediction(average_dewp_variation(average_listln2),c_average_dewp_variation(c_average_listln2),0,late_night_hour)
                phln = hum_prediction(average_hum_variation(average_listln3),c_average_hum_variation(c_average_listln3),0,late_night_hour)

                print("The predicition temeperature for morning: " + str(ptm))
                print("The predicition dew point for morning: " + str(pdm))
                print("The predicition humnidity for morning: " + str(phm))

                print("The predicition temeperature for afternoon: " + str(pta))
                print("The predicition dew point for afternoon: " + str(pda))
                print("The predicition humnidity for afternoon: " + str(pha))

                print("The predicition temeperature for evening: " + str(pte))
                print("The predicition dew point for evening: " + str(pde))
                print("The predicition humnidity for evening: " + str(phe))

                print("The predicition temeperature for early night: " + str(pten))
                print("The predicition dew point for early night: " + str(pden))
                print("The predicition humnidity for early night: " + str(phen))

                print("The predicition temeperature for late night: " + str(ptln))
                print("The predicition dew point for late night: " + str(pdln))
                print("The predicition humnidity for late night: " + str(phln))
                # Collect cloud coverage and preciptation percent
                start_date = numOfDays(firstday_of_thisyear, cloud_c_data)
                end_date = numOfDays(firstday_of_thisyear, cloud_c_data)
                cloud_coverage = []
                preciptation_percent = []
                with open("Montreal_2021_3&4.csv") as fd:
                  reader = csv.reader(fd)
                  data = [row for idx, row in enumerate(reader) if idx in range(((start_date-1)*24+1),(end_date*24)+1) ]
                  for x in range(24): 
                    cloud_coverage.append(data[x][24])
                    preciptation_percent.append(data[x][25])

                sum = 0
                sum1 = 0
                latecloud_average = 0
                latepre_average = 0
                for x in range(late_night_hour):
                  sum = sum + float(cloud_coverage[x])
                  sum1 = sum1 + float(preciptation_percent[x])
                latecloud_average = sum/late_night_hour
                latepre_average = sum1/late_night_hour
                print("The cloud coverage for late night is: " + str(round(latecloud_average)))
                print("The preciptation percent for late night is: " + str(latepre_average))

                if (latepre_average < 30):
                  z1 = theta1*(latecloud_average-3.5)
                  h1 = (1/(1+np.e**(-1*z1)))
                  if (h1 >= 0.5):
                    print("It is very cloudy!")
                  else:
                    print("Clear skies or partly cloudy!")  

                else:
                  z2 = theta2*(latecloud_average-6.5)
                  h2 = (1/(1+np.e**(-1*z2)))
                  if (ptln <= 0):
                    if (h2 >= 0.5):
                      print("It is heavily snowing!")
                    else:
                      print("It is lightly snowing!")  
                  else:
                    if (h2>0.5):
                      print("It is heavily raining!")
                    else:
                      print("It is lightly raining!")     

                sum = 0
                sum1 = 0
                morningcloud_average = 0
                morningpre_average = 0
                for x in range(morning_hour):
                  sum = sum + float(cloud_coverage[6+x])
                  sum1 = sum1 + float(preciptation_percent[6+x])
                morningcloud_average = sum/morning_hour
                morningpre_average = sum1/morning_hour
                print("The cloud coverage for morning is: " + str(round(morningcloud_average)))
                print("The preciptation percent for morning is: " + str(morningpre_average))
                if (morningpre_average < 30):
                  z1 = theta1*(morningcloud_average-3.5)
                  h1 = (1/(1+np.e**(-1*z1)))
                  if (h1 >= 0.5):
                    print("It is very cloudy!")
                  else:
                    print("It is sunny or partly cloudy!")  

                else:
                  z2 = theta2*(morningcloud_average-6.5)
                  h2 = (1/(1+np.e**(-1*z2)))
                  if (ptm <= 0):
                    if (h2 >= 0.5):
                      print("It is heavily snowing!")
                    else:
                      print("It is lightly snowing!")  
                  else:
                    if (h2>0.5):
                      print("It is heavily raining!")
                    else:
                      print("It is lightly raining!")   

                sum = 0
                sum1 = 0
                aftercloud_average = 0
                afterpre_average = 0
                for x in range(afternoon_hour):
                  sum = sum + float(cloud_coverage[12+x])
                  sum1 = sum1 + float(preciptation_percent[12+x])
                aftercloud_average = sum/afternoon_hour
                afterpre_average = sum1/afternoon_hour
                print("The cloud coverage for afternoon is: " + str(round(aftercloud_average)))
                print("The preciptation percent for afternoon is: " + str(afterpre_average))
                if (afterpre_average < 30):
                  z1 = theta1*(aftercloud_average -3.5)
                  h1 = (1/(1+np.e**(-1*z1)))
                  if (h1 >= 0.5):
                    print("It is very cloudy!")
                  else:
                    print("It is sunny or partly cloudy!")    

                else:
                  z2 = theta2*(aftercloud_average -6.5)
                  h2 = (1/(1+np.e**(-1*z2)))
                  if (pta <= 0):
                    if (h2 >= 0.5):
                      print("It is heavily snowing!")
                    else:
                      print("It is lightly snowing!")  
                  else:
                    if (h2>0.5):
                      print("It is heavily raining!")
                    else:
                      print("It is lightly raining!")                 

                sum = 0
                sum1 = 0
                evencloud_average = 0
                evenpre_average = 0
                for x in range(evening_hour):
                  sum = sum + float(cloud_coverage[17+x])
                  sum1 = sum1 + float(preciptation_percent[17+x])
                evencloud_average = sum/evening_hour
                evenpre_average = sum1/evening_hour
                print("The cloud coverage for evening is: " + str(round(evencloud_average)))
                print("The preciptation percent for evening is: " + str(evenpre_average))

                if (evenpre_average < 30):
                  z1 = theta1*(evencloud_average-3.5)
                  h1 = (1/(1+np.e**(-1*z1)))
                  if (h1 >= 0.5):
                    print("It is very cloudy!")
                  else:
                    print("It is sunny or partly cloudy!")    

                else:
                  z2 = theta2*(evencloud_average -6.5)
                  h2 = (1/(1+np.e**(-1*z2)))
                  if (pte <= 0):
                    if (h2 >= 0.5):
                      print("It is heavily snowing!")
                    else:
                      print("It is lightly snowing!")  
                  else:
                    if (h2>0.5):
                      print("It is heavily raining!")
                    else:
                      print("It is lightly raining!")                            

                sum = 0
                sum1 = 0
                earlycloud_average = 0
                earlypre_average = 0
                for x in range(early_night_hour):
                  sum = sum + float(cloud_coverage[21+x])
                  sum1 = sum1 + float(preciptation_percent[21+x])
                earlycloud_average = sum/early_night_hour
                earlypre_average = sum1/early_night_hour
                print("The cloud coverage for early night is: " + str(round(earlycloud_average)))
                print("The preciptation percent for early night is: " + str(earlypre_average))

                if (earlypre_average < 30):
                  z1 = theta1*(earlycloud_average -3.5)
                  h1 = (1/(1+np.e**(-1*z1)))
                  if (h1 >= 0.5):
                    print("It is very cloudy!")
                  else:
                    print("Clear Skies or partly cloudy!")        

                else:
                  z2 = theta2*(earlycloud_average -6.5)
                  h2 = (1/(1+np.e**(-1*z2)))
                  if (pten <= 0):
                    if (h2 >= 0.5):
                      print("It is heavily snowing!")
                    else:
                      print("It is lightly snowing!")  
                  else:
                    if (h2>0.5):
                      print("It is heavily raining!")
                    else:
                      print("It is lightly raining!") 

                # Collect todays data for comparesion
                start_date = numOfDays(firstday_of_thisyear, comparision_data)
                end_date = numOfDays(firstday_of_thisyear, comparision_data)
                today_temp = []
                today_dewpoints = []
                today_humidity = []
                with open("Montreal_2021_3&4.csv") as fd:
                  reader = csv.reader(fd)
                  data = [row for idx, row in enumerate(reader) if idx in range(((start_date-1)*24+1),(end_date*24)+1) ]
                  for x in range(24): 
                    today_temp.append(data[x][9])
                    today_dewpoints.append(data[x][11])
                    today_humidity.append(data[x][13])

                def average_T(start, period):
                  sum = 0
                  average_list = []
                  average_list.clear()
                  average = 0
                  a = 0
                  for x in range(period):
                    a = today_temp[start+x]
                    sum = sum+float(a)
                  average = sum/period
                  average_list.append(average)
                  sum = 0
                  average = 0
                  return average_list

                def average_D(start, period):
                  sum = 0
                  average_list = []
                  average_list.clear()
                  average = 0
                  a = 0
                  for x in range(period):
                    a = today_dewpoints[start+x]
                    sum = sum+float(a)
                  average = sum/period
                  average_list.append(average)
                  sum = 0
                  average = 0
                  return average_list

                def average_H(start, period):
                  sum = 0
                  average_list = []
                  average_list.clear()
                  average = 0
                  a = 0
                  for x in range(period):
                    a = today_humidity[start+x]
                    sum = sum+float(a)
                  average = sum/period
                  average_list.append(average)
                  sum = 0
                  average = 0
                  return average_list

                average_listm1 = average_T(6,morning_hour)
                average_listm2 = average_D(6,morning_hour)
                average_listm3 = average_H(6,morning_hour)

                average_lista1 = average_T(12,afternoon_hour)
                average_lista2 = average_D(12,afternoon_hour)
                average_lista3 = average_H(12,afternoon_hour)

                average_liste1 = average_T(17,evening_hour)
                average_liste2 = average_D(17,evening_hour)
                average_liste3 = average_H(17,evening_hour)

                average_listen1 = average_T(21,early_night_hour)
                average_listen2 = average_D(21,early_night_hour)
                average_listen3 = average_H(21,early_night_hour)

                average_listln1 = average_T(0,late_night_hour)
                average_listln2 = average_D(0,late_night_hour)
                average_listln3 = average_H(0,late_night_hour)

                print(f'Morning temperature: prediction: {ptm}, Actual: {average_listm1[0]}, Accuary percent: {abs(100 - abs(((ptm-average_listm1[0])/(average_listm1[0]))) * 100.0)}')
                print(f'Morning dewpoint: prediction: {pdm}, Actual: {average_listm2[0]}, Accuary percent: {abs(100 -  abs(((pdm-average_listm2[0])/(average_listm2[0]))) * 100.0)}')
                print(f'Morning hummidity: prediction: {phm}, Actual: {average_listm3[0]}, Accuary percent: {abs(100 - abs(((phm-average_listm3[0])/(average_listm3[0]))) * 100.0)}')
                print("")
                print(f'Afternoon temperature: prediction: {pta}, Actual: {average_lista1[0]}, Accuary percent: {abs(100 - abs(((pta-average_lista1[0])/(average_lista1[0]))) * 100.0)}')
                print(f'Afternoon dewpoint: prediction: {pda}, Actual: {average_lista2[0]}, Accuary percent: {abs(100 - abs(((pda-average_lista2[0])/(average_lista2[0]))) * 100.0)}')
                print(f'Afternoon hummidity: prediction: {pha}, Actual: {average_lista3[0]}, Accuary percent: {abs(100 - abs(((pha-average_lista3[0])/(average_lista3[0]))) * 100.0)}')
                print("")
                print(f'Evening temperature: prediction: {pte}, Actual: {average_liste1[0]}, Accuary percent: {abs(100 - abs(((pte-average_liste1[0])/(average_liste1[0]))) * 100.0)}')
                print(f'Evening dewpoint: prediction: {pde}, Actual: {average_liste2[0]}, Accuary percent: {abs(100 - abs(((pde-average_liste2[0])/(average_liste2[0]))) * 100.0)}')
                print(f'Evening hummidity: prediction: {phe}, Actual: {average_liste3[0]}, Accuary percent: {abs(100 - abs(((phe-average_liste3[0])/(average_liste3[0]))) * 100.0)}')
                print("")
                print(f'Early night temperature: prediction: {pten}, Actual: {average_listen1[0]}, Accuary percent: {abs(100 - abs(((pten-average_listen1[0])/(average_listen1[0]))) * 100.0)}')
                print(f'Early night dewpoint: prediction: {pden}, Actual: {average_listen2[0]}, Accuary percent: {abs(100 - abs(((pden-average_listen2[0])/(average_listen2[0]))) * 100.0)}')
                print(f'Early night hummidity: prediction: {phen}, Actual: {average_listen3[0]}, Accuary percent: {abs(100 - abs(((phen-average_listen3[0])/(average_listen3[0]))) * 100.0)}')
                print("")
                print(f'Late night temperature: prediction: {ptln}, Actual: {average_listln1[0]}, Accuary percent: {abs(100 - abs(((ptln-average_listln1[0])/(average_listln1[0]))) * 100.0)}')
                print(f'Late night dewpoint: prediction: {pdln}, Actual: {average_listln2[0]}, Accuary percent: {abs(100 - abs(((pdln-average_listln2[0])/(average_listln2[0]))) * 100.0)}')
                print(f'Late night hummidity: prediction: {phln}, Actual: {average_listln3[0]}, Accuary percent: {abs(100 - abs(((phln-average_listln3[0])/(average_listln3[0]))) * 100.0)}')
                print("")

                print("--- %s seconds ---" % (time.time() - start_time))
##################################################################################################################################################################
          elif (city=="O"):
                  start_time = time.time()
                  # Collect past weeks data from current year (Hourly, total of 168 data)
                  start_goal = date(start_pastweek.year,start_pastweek.month,start_pastweek.day)
                  end_goal = date(end_pastweek.year,end_pastweek.month,end_pastweek.day)
                  start3 = numOfDays(firstday_of_thisyear, start_goal)
                  end3 = numOfDays(firstday_of_thisyear, end_goal)
                  twenty_four_current_temp = []
                  current_dew_point = []
                  current_humidity = []
                  with open("Ottawa_2021_3&4.csv") as fd:
                      reader = csv.reader(fd)
                      data = [row for idx, row in enumerate(reader) if idx in range((start3-1)*24+1,(end3)*24+1) ]
                      for x in range(7*24):
                          twenty_four_current_temp.append(data[x][9])
                          current_dew_point.append(data[x][11])
                          current_humidity.append(data[x][13])

                  # Collect past weeks data from past year (Hourly, total of 168 data)
                  start_date = numOfDays(firstday_of_pastyear, start)
                  end_date = numOfDays(firstday_of_pastyear, end1)
                  yesterday_temp = []
                  yesterday_dewpoints = []
                  yesterday_humidity = []
                  with open("Ottawa_2020_3&4&5.csv") as fd:
                    reader = csv.reader(fd)
                    data = [row for idx, row in enumerate(reader) if idx in range(((start_date-1)*24+1),(end_date*24)+1) ]
                    for x in range(168): 
                      yesterday_temp.append(data[x][9])
                      yesterday_dewpoints.append(data[x][11])
                      yesterday_humidity.append(data[x][13])

                  # Collect past two weeks data from past year (Hourly, total of 336 data)
                  start_date = numOfDays(firstday_of_pastyear, start)
                  end_date = numOfDays(firstday_of_pastyear, end2)
                  temp = []
                  dewpoints = []
                  humidity = []
                  pastyear_temp = []
                  pastyear_dewpoints = []
                  pastyear_humidity = []
                  with open("Ottawa_2020_3&4&5.csv") as fd:
                    reader = csv.reader(fd)
                    data = [row for idx, row in enumerate(reader) if idx in range(((start_date-1)*24+1),(end_date*24)+1) ]
                    for x in range(312):
                        pastyear_temp.append(data[x][9])
                        pastyear_dewpoints.append(data[x][11])
                        pastyear_humidity.append(data[x][13])
                    for x in range(13): 
                        sum1 = 0
                        sum2 = 0
                        sum3 = 0
                        average1 = 0
                        average2 = 0
                        average3 = 0
                        for y in range(24):
                            sum1 = sum1 + float(data[y+x*24][9])
                            sum2 = sum2 + float(data[y+x*24][11])
                            sum3 = sum3 + float(data[y+x*24][13])
                        average1 = sum1/24.0
                        average2 = sum2/24.0
                        average3 = sum3/24.0
                        temp.append(average1)
                        dewpoints.append(average2)
                        humidity.append(average3)
                    

                  sum1 = 0
                  sum2 = 0
                  average1 = 0
                  average2 = 0
                  with open("Ottawa_2020_3&4&5.csv") as fd:
                    reader = csv.reader(fd)
                    data = [row for idx, row in enumerate(reader) if idx in range(1,25) ]
                    for x in range(24):
                        pastyear_temp.append(data[x][9])
                        pastyear_dewpoints.append(data[x][11])
                        pastyear_humidity.append(data[x][13])
                    for y in range(24):
                        sum1 = sum1 + float(data[y][9])
                        sum2 = sum2 + float(data[y][11])
                        sum3 = sum3 + float(data[y][13])
                    average1 = sum1/24.0
                    average2 = sum2/24.0
                    average3 = sum3/24.0
                    temp.append(average1)
                    dewpoints.append(average2)
                    humidity.append(average3)

                  temperature_window = [[],[],[],[],[],[],[],[]]
                  dewpoints_window = [[],[],[],[],[],[],[],[]]
                  humidity_window = [[],[],[],[],[],[],[],[]]
                  counta = 0
                  for x in range(8):
                    for y in range(7):
                      temperature_window[x].append(temp[y+counta])
                      dewpoints_window[x].append(dewpoints[y+counta])
                      humidity_window[x].append(humidity[y+counta])
                    counta = counta+1

                  # Calculate Euclidean distance for each temperature window
                  current_temp7 = []
                  current_dew_point7  = []
                  current_humidity7 = []
                  sum1 = 0
                  sum2 = 0
                  sum3 = 0
                  for y in range(7):
                    for x in range(24):
                      sum1 = sum1 + float(twenty_four_current_temp[x+y*24])
                      sum2 = sum2 + float(current_dew_point[x+y*24])
                      sum3 = sum3 + float(current_humidity[x+y*24])
                      average1 = sum1/24.0
                      average2 = sum2/24.0
                      average3 = sum3/24.0
                    current_temp7.append(average1)
                    current_dew_point7.append(average2)
                    current_humidity7.append(average3)
                    sum1 = 0
                    sum2 = 0
                    sum3 = 0
                  temp_euclidean_distance = []
                  dowpoints_euclidean_distance = []
                  humidity_euclidean_distance = []
                  for x in range(8):
                    window_sqr1 = 0
                    window_sqr2 = 0
                    window_sqr3 = 0
                    root1 = 0
                    root2 = 0
                    root3 = 0
                    sqr1 = 0
                    sqr2 = 0
                    sqr3 = 0
                    answer1 = 0
                    answer2 = 0
                    answer3 = 0
                    for y in range(7):
                      answer1 = float(current_temp7[y])-float(temperature_window[x][y])
                      answer2 = float(current_dew_point7[y])-float(dewpoints_window[x][y])
                      answer3 = float(current_humidity7[y])-float(humidity_window[x][y])
                      sqr1 = answer1*answer1
                      sqr2 = answer2*answer2
                      sqr3 = answer3*answer3
                      window_sqr1 = window_sqr1+sqr1
                      window_sqr2 = window_sqr2+sqr2
                      window_sqr3 = window_sqr3+sqr3
                    root1 = math.sqrt(window_sqr1)
                    root2 = math.sqrt(window_sqr2)
                    root3 = math.sqrt(window_sqr3)
                    temp_euclidean_distance.append(root1)
                    dowpoints_euclidean_distance.append(root2)
                    humidity_euclidean_distance.append(root3)

                  # Base on the euclidean distance, find the index of the smallest euclidean distance
                  index = 0
                  min = temp_euclidean_distance[0]
                  for x in range(len(temp_euclidean_distance)):
                    if temp_euclidean_distance[x]<min:
                      min = temp_euclidean_distance[x]
                    index = temp_euclidean_distance.index(min)
                    
                  temp_window = index+1



                  index = 0
                  min = dowpoints_euclidean_distance[0]
                  for x in range(len(dowpoints_euclidean_distance)):
                    if dowpoints_euclidean_distance[x]<min:
                      min = dowpoints_euclidean_distance[x]
                    index = dowpoints_euclidean_distance.index(min)
                    
                  dew_window = index+1


                  index = 0
                  min = humidity_euclidean_distance[0]
                  for x in range(len(humidity_euclidean_distance)):
                    if humidity_euclidean_distance[x]<min:
                      min = humidity_euclidean_distance[x]
                    index = humidity_euclidean_distance.index(min)

                  hum_window = index+1


                  # Average of data (temperature, dew points, humidity) 2020

                  def average_temp_data(start, period):
                    sum = 0
                    average_list = []
                    average_list.clear()
                    average = 0
                    a = 0
                    for x in range(7):
                      for y in range(period):
                        a = pastyear_temp[y+start+(x*24)+(temp_window-1)*24]
                        sum = sum+float(a)
                      average = sum/period
                      average_list.append(average)
                      sum = 0
                      average = 0
                    return average_list

                  def average_dewp_data(start, period):
                    sum = 0
                    average_list = []
                    average_list.clear()
                    average = 0
                    a = 0
                    for x in range(7):
                      for y in range(period):
                        a = pastyear_dewpoints[y+start+(x*24)+(dew_window-1)*24]
                        sum = sum+float(a)
                      average = sum/period
                      average_list.append(average)
                      sum = 0
                      average = 0
                    return average_list

                  def average_hum_data(start, period):
                    sum = 0
                    average_list = []
                    average_list.clear()
                    average = 0
                    a = 0
                    for x in range(7):
                      for y in range(period):
                        a = pastyear_humidity[y+start+(x*24)+(hum_window-1)*24]
                        sum = sum+float(a)
                      average = sum/period
                      average_list.append(average)
                      sum = 0
                      average = 0
                    return average_list

          

                  average_listm1 = average_temp_data(6,morning_hour)
                  average_listm2 = average_dewp_data(6,morning_hour)
                  average_listm3 = average_hum_data(6,morning_hour)

                  average_lista1 = average_temp_data(12,afternoon_hour)
                  average_lista2 = average_dewp_data(12,afternoon_hour)
                  average_lista3 = average_hum_data(12,afternoon_hour)

                  average_liste1 = average_temp_data(17,evening_hour)
                  average_liste2 = average_dewp_data(17,evening_hour)
                  average_liste3 = average_hum_data(17,evening_hour)

                  average_listen1 = average_temp_data(21,early_night_hour)
                  average_listen2 = average_dewp_data(21,early_night_hour)
                  average_listen3 = average_hum_data(21,early_night_hour)

                  average_listln1 = average_temp_data(0,late_night_hour)
                  average_listln2 = average_dewp_data(0,late_night_hour)
                  average_listln3 = average_hum_data(0,late_night_hour)

                  # Average of data (temperature, dew points, humidity) 2021

                  def c_average_temp_data(start, period):
                    sum = 0
                    average_list = []
                    average_list.clear()
                    average = 0
                    a = 0
                    for x in range(7):
                      for y in range(period):
                        a = twenty_four_current_temp[start+y+(x*24)]
                        sum = sum+float(a)
                      average = sum/period
                      average_list.append(average)
                      sum = 0
                      average = 0
                    return average_list

                  def c_average_dewp_data(start, period):
                    sum = 0
                    average_list = []
                    average_list.clear()
                    average = 0
                    a = 0
                    for x in range(7):
                      for y in range(period):
                        a = current_dew_point[start+y+(x*24)]
                        sum = sum+float(a)
                      average = sum/period
                      average_list.append(average)
                      sum = 0
                      average = 0
                    return average_list

                  def c_average_hum_data(start, period):
                    sum = 0
                    average_list = []
                    average_list.clear()
                    average = 0
                    a = 0
                    for x in range(7):
                      for y in range(period):
                        a = current_humidity[start+y+(x*24)]
                        sum = sum+float(a)
                      average = sum/period
                      average_list.append(average)
                      sum = 0
                      average = 0
                    return average_list

                  c_average_listm1 = c_average_temp_data(6,morning_hour)
                  c_average_listm2 = c_average_dewp_data(6,morning_hour)
                  c_average_listm3 = c_average_hum_data(6,morning_hour)

                  c_average_lista1 = c_average_temp_data(12,afternoon_hour)
                  c_average_lista2 = c_average_dewp_data(12,afternoon_hour)
                  c_average_lista3 = c_average_hum_data(12,afternoon_hour)

                  c_average_liste1 = c_average_temp_data(17,evening_hour)
                  c_average_liste2 = c_average_dewp_data(17,evening_hour)
                  c_average_liste3 = c_average_hum_data(17,evening_hour)

                  c_average_listen1 = c_average_temp_data(21,early_night_hour)
                  c_average_listen2 = c_average_dewp_data(21,early_night_hour)
                  c_average_listen3 = c_average_hum_data(21,early_night_hour)

                  c_average_listln1 = c_average_temp_data(0,late_night_hour)
                  c_average_listln2 = c_average_dewp_data(0,late_night_hour)
                  c_average_listln3 = c_average_hum_data(0,late_night_hour)

                  # Prediction

                  def temp_prediction(past__t_v,current_t_v,start,period):
                    sum = 0
                    average = 0 
                    prediction_data = 0
                    variation = (past__t_v + current_t_v)/2.0
                    for x in range(period):
                      prediction_data = float(twenty_four_current_temp[24*6+start+x])
                      sum = sum + prediction_data
                    average = sum/period
                    preduction_data = average + variation
                    return preduction_data

                  def dewp_prediction(past__d_v,current_d_v,start,period):
                    sum = 0
                    average = 0 
                    prediction_data = 0
                    variation = (past__d_v + current_d_v)/2.0
                    for x in range(period):
                      prediction_data = float(current_dew_point[24*6+start+x])
                      sum = sum + prediction_data
                    average = sum/period
                    preduction_data = average + variation
                    return preduction_data

                  def hum_prediction(past__h_v,current_h_v,start,period):
                    sum = 0
                    average = 0 
                    prediction_data = 0
                    variation = (past__h_v + current_h_v)/2.0
                    for x in range(period):
                      prediction_data = float(current_humidity[24*6+start+x])
                      sum = sum + prediction_data
                    average = sum/period
                    preduction_data = average + variation
                    return preduction_data

                  ptm = temp_prediction(average_temp_variation(average_listm1),c_average_temp_variation(c_average_listm1),6,morning_hour)
                  pdm = dewp_prediction(average_dewp_variation(average_listm2),c_average_dewp_variation(c_average_listm2),6,morning_hour)
                  phm = hum_prediction(average_hum_variation(average_listm3),c_average_hum_variation(c_average_listm3),6,morning_hour)

                  pta = temp_prediction(average_temp_variation(average_lista1),c_average_temp_variation(c_average_lista1),12,afternoon_hour)
                  pda = dewp_prediction(average_dewp_variation(average_lista2),c_average_dewp_variation(c_average_lista2),12,afternoon_hour)
                  pha = hum_prediction(average_hum_variation(average_lista3),c_average_hum_variation(c_average_lista3),12,afternoon_hour)

                  pte = temp_prediction(average_temp_variation(average_liste1),c_average_temp_variation(c_average_liste1),17,evening_hour)
                  pde = dewp_prediction(average_dewp_variation(average_liste2),c_average_dewp_variation(c_average_liste2),17,evening_hour)
                  phe = hum_prediction(average_hum_variation(average_liste3),c_average_hum_variation(c_average_liste3),17,evening_hour)

                  pten = temp_prediction(average_temp_variation(average_listen1),c_average_temp_variation(c_average_listen1),21,early_night_hour)
                  pden = dewp_prediction(average_dewp_variation(average_listen2),c_average_dewp_variation(c_average_listen2),21,early_night_hour)
                  phen = hum_prediction(average_hum_variation(average_listen3),c_average_hum_variation(c_average_listen3),21,early_night_hour)

                  ptln = temp_prediction(average_temp_variation(average_listln1),c_average_temp_variation(c_average_listln1),0,late_night_hour)
                  pdln = dewp_prediction(average_dewp_variation(average_listln2),c_average_dewp_variation(c_average_listln2),0,late_night_hour)
                  phln = hum_prediction(average_hum_variation(average_listln3),c_average_hum_variation(c_average_listln3),0,late_night_hour)

                  print("The predicition temeperature for morning: " + str(ptm))
                  print("The predicition dew point for morning: " + str(pdm))
                  print("The predicition humnidity for morning: " + str(phm))

                  print("The predicition temeperature for afternoon: " + str(pta))
                  print("The predicition dew point for afternoon: " + str(pda))
                  print("The predicition humnidity for afternoon: " + str(pha))

                  print("The predicition temeperature for evening: " + str(pte))
                  print("The predicition dew point for evening: " + str(pde))
                  print("The predicition humnidity for evening: " + str(phe))

                  print("The predicition temeperature for early night: " + str(pten))
                  print("The predicition dew point for early night: " + str(pden))
                  print("The predicition humnidity for early night: " + str(phen))

                  print("The predicition temeperature for late night: " + str(ptln))
                  print("The predicition dew point for late night: " + str(pdln))
                  print("The predicition humnidity for late night: " + str(phln))

                  # Collect cloud coverage and preciptation percent
 
                  start_date = numOfDays(firstday_of_thisyear, cloud_c_data)
                  end_date = numOfDays(firstday_of_thisyear, cloud_c_data)
                  cloud_coverage = []
                  preciptation_percent = []
                  with open("Ottawa_2021_3&4.csv") as fd:
                    reader = csv.reader(fd)
                    data = [row for idx, row in enumerate(reader) if idx in range(((start_date-1)*24+1),(end_date*24)+1) ]
                    for x in range(24): 
                      cloud_coverage.append(data[x][24])
                      preciptation_percent.append(data[x][25])

                  sum = 0
                  sum1 = 0
                  latecloud_average = 0
                  latepre_average = 0
                  for x in range(late_night_hour):
                    sum = sum + float(cloud_coverage[x])
                    sum1 = sum1 + float(preciptation_percent[x])
                  latecloud_average = sum/late_night_hour
                  latepre_average = sum1/late_night_hour
                  print("The cloud coverage for late night is: " + str(round(latecloud_average)))
                  print("The preciptation percent for late night is: " + str(latepre_average))
                  if (latepre_average < 30):
                    z1 = theta1*(latecloud_average-3.5)
                    h1 = (1/(1+np.e**(-1*z1)))
                    if (h1 >= 0.5):
                      print("It is very cloudy!")
                    else:
                      print("Clear skies or partly cloudy!")  

                  else:
                    z2 = theta2*(latecloud_average-6.5)
                    h2 = (1/(1+np.e**(-1*z2)))
                    if (ptln <= 0):
                      if (h2 >= 0.5):
                        print("It is heavily snowing!")
                      else:
                        print("It is lightly snowing!")  
                    else:
                      if (h2>0.5):
                        print("It is heavily raining!")
                      else:
                        print("It is lightly raining!")                   

                  sum = 0
                  sum1 = 0
                  morningcloud_average = 0
                  morningpre_average = 0
                  for x in range(morning_hour):
                    sum = sum + float(cloud_coverage[6+x])
                    sum1 = sum1 + float(preciptation_percent[6+x])
                  morningcloud_average = sum/morning_hour
                  morningpre_average = sum1/morning_hour
                  print("The cloud coverage for morning is: " + str(round(morningcloud_average)))
                  print("The preciptation percent for morning is: " + str(morningpre_average))
                  if (morningpre_average < 30):
                    z1 = theta1*(morningcloud_average-3.5)
                    h1 = (1/(1+np.e**(-1*z1)))
                    if (h1 >= 0.5):
                      print("It is very cloudy!")
                    else:
                      print("It is sunny or partly cloudy!")  

                  else:
                    z2 = theta2*(morningcloud_average -6.5)
                    h2 = (1/(1+np.e**(-1*z2)))
                    if (ptm <= 0):
                      if (h2 >= 0.5):
                        print("It is heavily snowing!")
                      else:
                        print("It is lightly snowing!")  
                    else:
                      if (h2>0.5):
                        print("It is heavily raining!")
                      else:
                        print("It is lightly raining!") 

                  sum = 0
                  sum1 = 0
                  aftercloud_average = 0
                  afterpre_average = 0
                  for x in range(afternoon_hour):
                    sum = sum + float(cloud_coverage[12+x])
                    sum1 = sum1 + float(preciptation_percent[12+x])
                  aftercloud_average = sum/afternoon_hour
                  afterpre_average = sum1/afternoon_hour
                  print("The cloud coverage for afternoon is: " + str(round(aftercloud_average)))
                  print("The preciptation percent for afternoon is: " + str(afterpre_average))
                  if (afterpre_average < 30):
                    z1 = theta1*(aftercloud_average-3.5)
                    h1 = (1/(1+np.e**(-1*z1)))
                    if (h1 >= 0.5):
                      print("It is very cloudy!")
                    else:
                      print("It is sunny or partly cloudy!")    

                  else:
                    z2 = theta2*(aftercloud_averag-6.5)
                    h2 = (1/(1+np.e**(-1*z2)))
                    if (pta <= 0):
                      if (h2 >= 0.5):
                        print("It is heavily snowing!")
                      else:
                        print("It is lightly snowing!")  
                    else:
                      if (h2>0.5):
                        print("It is heavily raining!")
                      else:
                        print("It is lightly raining!")                   

                  sum = 0
                  sum1 = 0
                  evencloud_average = 0
                  evenpre_average = 0
                  for x in range(evening_hour):
                    sum = sum + float(cloud_coverage[17+x])
                    sum1 = sum1 + float(preciptation_percent[17+x])
                  evencloud_average = sum/evening_hour
                  evenpre_average = sum1/evening_hour
                  print("The cloud coverage for evening is: " + str(round(evencloud_average)))
                  print("The preciptation percent for evening is: " + str(evenpre_average))

                  if (evenpre_average < 30):
                    z1 = theta1*(evencloud_average-3.5)
                    h1 = (1/(1+np.e**(-1*z1)))
                    if (h1 >= 0.5):
                      print("It is very cloudy!")
                    else:
                      print("It is sunny or partly cloudy!")    

                  else:
                    z2 = theta2*(evencloud_average-6.5)
                    h2 = (1/(1+np.e**(-1*z2)))
                    if (pte <= 0):
                      if (h2 >= 0.5):
                        print("It is heavily snowing!")
                      else:
                        print("It is lightly snowing!")  
                    else:
                      if (h2>0.5):
                        print("It is heavily raining!")
                      else:
                        print("It is lightly raining!") 

                  sum = 0
                  sum1 = 0
                  earlycloud_average = 0
                  earlypre_average = 0
                  for x in range(early_night_hour):
                    sum = sum + float(cloud_coverage[21+x])
                    sum1 = sum1 + float(preciptation_percent[21+x])
                  earlycloud_average = sum/early_night_hour
                  earlypre_average = sum1/early_night_hour
                  print("The cloud coverage for early night is: " + str(round(earlycloud_average)))
                  print("The preciptation percent for early night is: " + str(earlypre_average))

                  if (earlypre_average < 30):
                    z1 = theta1*(earlycloud_average-3.5)
                    h1 = (1/(1+np.e**(-1*z1)))
                    if (h1 >= 0.5):
                      print("It is very cloudy!")
                    else:
                      print("Clear skies or partly cloudy!")    

                  else:
                    z2 = theta2*(earlycloud_average-6.5)
                    h2 = (1/(1+np.e**(-1*z2)))
                    if (pten <= 0):
                      if (h2 >= 0.5):
                        print("It is heavily snowing!")
                      else:
                        print("It is lightly snowing!")  
                    else:
                      if (h2>0.5):
                        print("It is heavily raining!")
                      else:
                        print("It is lightly raining!")                   

                  # Collect todays data for comparesion
                  start_date = numOfDays(firstday_of_thisyear, comparision_data)
                  end_date = numOfDays(firstday_of_thisyear, comparision_data)
                  today_temp = []
                  today_dewpoints = []
                  today_humidity = []
                  with open("Ottawa_2021_3&4.csv") as fd:
                    reader = csv.reader(fd)
                    data = [row for idx, row in enumerate(reader) if idx in range(((start_date-1)*24+1),(end_date*24)+1) ]
                    for x in range(24): 
                      today_temp.append(data[x][9])
                      today_dewpoints.append(data[x][11])
                      today_humidity.append(data[x][13])

                  def average_T(start, period):
                    sum = 0
                    average_list = []
                    average_list.clear()
                    average = 0
                    a = 0
                    for x in range(period):
                      a = today_temp[start+x]
                      sum = sum+float(a)
                    average = sum/period
                    average_list.append(average)
                    sum = 0
                    average = 0
                    return average_list

                  def average_D(start, period):
                    sum = 0
                    average_list = []
                    average_list.clear()
                    average = 0
                    a = 0
                    for x in range(period):
                      a = today_dewpoints[start+x]
                      sum = sum+float(a)
                    average = sum/period
                    average_list.append(average)
                    sum = 0
                    average = 0
                    return average_list

                  def average_H(start, period):
                    sum = 0
                    average_list = []
                    average_list.clear()
                    average = 0
                    a = 0
                    for x in range(period):
                      a = today_humidity[start+x]
                      sum = sum+float(a)
                    average = sum/period
                    average_list.append(average)
                    sum = 0
                    average = 0
                    return average_list

                  average_listm1 = average_T(6,morning_hour)
                  average_listm2 = average_D(6,morning_hour)
                  average_listm3 = average_H(6,morning_hour)

                  average_lista1 = average_T(12,afternoon_hour)
                  average_lista2 = average_D(12,afternoon_hour)
                  average_lista3 = average_H(12,afternoon_hour)

                  average_liste1 = average_T(17,evening_hour)
                  average_liste2 = average_D(17,evening_hour)
                  average_liste3 = average_H(17,evening_hour)

                  average_listen1 = average_T(21,early_night_hour)
                  average_listen2 = average_D(21,early_night_hour)
                  average_listen3 = average_H(21,early_night_hour)

                  average_listln1 = average_T(0,late_night_hour)
                  average_listln2 = average_D(0,late_night_hour)
                  average_listln3 = average_H(0,late_night_hour)

                  print(f'Morning temperature: prediction: {ptm}, Actual: {average_listm1[0]}, Accuary percent: {abs(100 - abs(((ptm-average_listm1[0])/(average_listm1[0]))) * 100.0)}')
                  print(f'Morning dewpoint: prediction: {pdm}, Actual: {average_listm2[0]}, Accuary percent: {abs(100 -  abs(((pdm-average_listm2[0])/(average_listm2[0]))) * 100.0)}')
                  print(f'Morning hummidity: prediction: {phm}, Actual: {average_listm3[0]}, Accuary percent: {abs(100 - abs(((phm-average_listm3[0])/(average_listm3[0]))) * 100.0)}')
                  print("")
                  print(f'Afternoon temperature: prediction: {pta}, Actual: {average_lista1[0]}, Accuary percent: {abs(100 - abs(((pta-average_lista1[0])/(average_lista1[0]))) * 100.0)}')
                  print(f'Afternoon dewpoint: prediction: {pda}, Actual: {average_lista2[0]}, Accuary percent: {abs(100 - abs(((pda-average_lista2[0])/(average_lista2[0]))) * 100.0)}')
                  print(f'Afternoon hummidity: prediction: {pha}, Actual: {average_lista3[0]}, Accuary percent: {abs(100 - abs(((pha-average_lista3[0])/(average_lista3[0]))) * 100.0)}')
                  print("")
                  print(f'Evening temperature: prediction: {pte}, Actual: {average_liste1[0]}, Accuary percent: {abs(100 - abs(((pte-average_liste1[0])/(average_liste1[0]))) * 100.0)}')
                  print(f'Evening dewpoint: prediction: {pde}, Actual: {average_liste2[0]}, Accuary percent: {abs(100 - abs(((pde-average_liste2[0])/(average_liste2[0]))) * 100.0)}')
                  print(f'Evening hummidity: prediction: {phe}, Actual: {average_liste3[0]}, Accuary percent: {abs(100 - abs(((phe-average_liste3[0])/(average_liste3[0]))) * 100.0)}')
                  print("")
                  print(f'Early night temperature: prediction: {pten}, Actual: {average_listen1[0]}, Accuary percent: {abs(100 - abs(((pten-average_listen1[0])/(average_listen1[0]))) * 100.0)}')
                  print(f'Early night dewpoint: prediction: {pden}, Actual: {average_listen2[0]}, Accuary percent: {abs(100 - abs(((pden-average_listen2[0])/(average_listen2[0]))) * 100.0)}')
                  print(f'Early night hummidity: prediction: {phen}, Actual: {average_listen3[0]}, Accuary percent: {abs(100 - abs(((phen-average_listen3[0])/(average_listen3[0]))) * 100.0)}')
                  print("")
                  print(f'Late night temperature: prediction: {ptln}, Actual: {average_listln1[0]}, Accuary percent: {abs(100 - abs(((ptln-average_listln1[0])/(average_listln1[0]))) * 100.0)}')
                  print(f'Late night dewpoint: prediction: {pdln}, Actual: {average_listln2[0]}, Accuary percent: {abs(100 - abs(((pdln-average_listln2[0])/(average_listln2[0]))) * 100.0)}')
                  print(f'Late night hummidity: prediction: {phln}, Actual: {average_listln3[0]}, Accuary percent: {abs(100 - abs(((phln-average_listln3[0])/(average_listln3[0]))) * 100.0)}')
                  print("")

                  print("--- %s seconds ---" % (time.time() - start_time))
#######################################################################################################################################################################
          elif (city == "W"):
                      start_time = time.time()
                      # Collect past weeks data from current year (Hourly, total of 168 data)
                      start_goal = date(start_pastweek.year,start_pastweek.month,start_pastweek.day)
                      end_goal = date(end_pastweek.year,end_pastweek.month,end_pastweek.day)
                      start3 = numOfDays(firstday_of_thisyear, start_goal)
                      end3 = numOfDays(firstday_of_thisyear, end_goal)
                      twenty_four_current_temp = []
                      current_dew_point = []
                      current_humidity = []
                      with open("Winnipeg_2021_3&4.csv") as fd:
                          reader = csv.reader(fd)
                          data = [row for idx, row in enumerate(reader) if idx in range((start3-1)*24+1,(end3)*24+1) ]
                          for x in range(7*24):
                              twenty_four_current_temp.append(data[x][9])
                              current_dew_point.append(data[x][11])
                              current_humidity.append(data[x][13])

                      # Collect past weeks data from past year (Hourly, total of 168 data)
                      start_date = numOfDays(firstday_of_pastyear, start)
                      end_date = numOfDays(firstday_of_pastyear, end1)
                      yesterday_temp = []
                      yesterday_dewpoints = []
                      yesterday_humidity = []
                      with open("Winnipeg_2020_3&4&5.csv") as fd:
                        reader = csv.reader(fd)
                        data = [row for idx, row in enumerate(reader) if idx in range(((start_date-1)*24+1),(end_date*24)+1) ]
                        for x in range(168): 
                          yesterday_temp.append(data[x][9])
                          yesterday_dewpoints.append(data[x][11])
                          yesterday_humidity.append(data[x][13])

                      # Collect past two weeks data from past year (Hourly, total of 336 data)
                      start_date = numOfDays(firstday_of_pastyear, start)
                      end_date = numOfDays(firstday_of_pastyear, end2)
                      temp = []
                      dewpoints = []
                      humidity = []
                      pastyear_temp = []
                      pastyear_dewpoints = []
                      pastyear_humidity = []
                      with open("Winnipeg_2020_3&4&5.csv") as fd:
                        reader = csv.reader(fd)
                        data = [row for idx, row in enumerate(reader) if idx in range(((start_date-1)*24+1),(end_date*24)+1) ]
                        for x in range(312):
                            pastyear_temp.append(data[x][9])
                            pastyear_dewpoints.append(data[x][11])
                            pastyear_humidity.append(data[x][13])
                        for x in range(13): 
                            sum1 = 0
                            sum2 = 0
                            sum3 = 0
                            average1 = 0
                            average2 = 0
                            average3 = 0
                            for y in range(24):
                                sum1 = sum1 + float(data[y+x*24][9])
                                sum2 = sum2 + float(data[y+x*24][11])
                                sum3 = sum3 + float(data[y+x*24][13])
                            average1 = sum1/24.0
                            average2 = sum2/24.0
                            average3 = sum3/24.0
                            temp.append(average1)
                            dewpoints.append(average2)
                            humidity.append(average3)
                        

                      sum1 = 0
                      sum2 = 0
                      average1 = 0
                      average2 = 0
                      with open("Winnipeg_2020_3&4&5.csv") as fd:
                        reader = csv.reader(fd)
                        data = [row for idx, row in enumerate(reader) if idx in range(1,25) ]
                        for x in range(24):
                            pastyear_temp.append(data[x][9])
                            pastyear_dewpoints.append(data[x][11])
                            pastyear_humidity.append(data[x][13])
                        for y in range(24):
                            sum1 = sum1 + float(data[y][9])
                            sum2 = sum2 + float(data[y][11])
                            sum3 = sum3 + float(data[y][13])
                        average1 = sum1/24.0
                        average2 = sum2/24.0
                        average3 = sum3/24.0
                        temp.append(average1)
                        dewpoints.append(average2)
                        humidity.append(average3)

                      temperature_window = [[],[],[],[],[],[],[],[]]
                      dewpoints_window = [[],[],[],[],[],[],[],[]]
                      humidity_window = [[],[],[],[],[],[],[],[]]
                      counta = 0
                      for x in range(8):
                        for y in range(7):
                          temperature_window[x].append(temp[y+counta])
                          dewpoints_window[x].append(dewpoints[y+counta])
                          humidity_window[x].append(humidity[y+counta])
                        counta = counta+1

                      # Calculate Euclidean distance for each temperature window
                      current_temp7 = []
                      current_dew_point7  = []
                      current_humidity7 = []
                      sum1 = 0
                      sum2 = 0
                      sum3 = 0
                      for y in range(7):
                        for x in range(24):
                          sum1 = sum1 + float(twenty_four_current_temp[x+y*24])
                          sum2 = sum2 + float(current_dew_point[x+y*24])
                          sum3 = sum3 + float(current_humidity[x+y*24])
                          average1 = sum1/24.0
                          average2 = sum2/24.0
                          average3 = sum3/24.0
                        current_temp7.append(average1)
                        current_dew_point7.append(average2)
                        current_humidity7.append(average3)
                        sum1 = 0
                        sum2 = 0
                        sum3 = 0
                      temp_euclidean_distance = []
                      dowpoints_euclidean_distance = []
                      humidity_euclidean_distance = []
                      for x in range(8):
                        window_sqr1 = 0
                        window_sqr2 = 0
                        window_sqr3 = 0
                        root1 = 0
                        root2 = 0
                        root3 = 0
                        sqr1 = 0
                        sqr2 = 0
                        sqr3 = 0
                        answer1 = 0
                        answer2 = 0
                        answer3 = 0
                        for y in range(7):
                          answer1 = float(current_temp7[y])-float(temperature_window[x][y])
                          answer2 = float(current_dew_point7[y])-float(dewpoints_window[x][y])
                          answer3 = float(current_humidity7[y])-float(humidity_window[x][y])
                          sqr1 = answer1*answer1
                          sqr2 = answer2*answer2
                          sqr3 = answer3*answer3
                          window_sqr1 = window_sqr1+sqr1
                          window_sqr2 = window_sqr2+sqr2
                          window_sqr3 = window_sqr3+sqr3
                        root1 = math.sqrt(window_sqr1)
                        root2 = math.sqrt(window_sqr2)
                        root3 = math.sqrt(window_sqr3)
                        temp_euclidean_distance.append(root1)
                        dowpoints_euclidean_distance.append(root2)
                        humidity_euclidean_distance.append(root3)

                      # Base on the euclidean distance, find the index of the smallest euclidean distance
                      index = 0
                      min = temp_euclidean_distance[0]
                      for x in range(len(temp_euclidean_distance)):
                        if temp_euclidean_distance[x]<min:
                          min = temp_euclidean_distance[x]
                        index = temp_euclidean_distance.index(min)
                        
                      temp_window = index+1


                      index = 0
                      min = dowpoints_euclidean_distance[0]
                      for x in range(len(dowpoints_euclidean_distance)):
                        if dowpoints_euclidean_distance[x]<min:
                          min = dowpoints_euclidean_distance[x]
                        index = dowpoints_euclidean_distance.index(min)
                        
                      dew_window = index+1

                      index = 0
                      min = humidity_euclidean_distance[0]
                      for x in range(len(humidity_euclidean_distance)):
                        if humidity_euclidean_distance[x]<min:
                          min = humidity_euclidean_distance[x]
                        index = humidity_euclidean_distance.index(min)

                      hum_window = index+1

                      # Average of data (temperature, dew points, humidity) 2020

                      def average_temp_data(start, period):
                        sum = 0
                        average_list = []
                        average_list.clear()
                        average = 0
                        a = 0
                        for x in range(7):
                          for y in range(period):
                            a = pastyear_temp[y+start+(x*24)+(temp_window-1)*24]
                            sum = sum+float(a)
                          average = sum/period
                          average_list.append(average)
                          sum = 0
                          average = 0
                        return average_list

                      def average_dewp_data(start, period):
                        sum = 0
                        average_list = []
                        average_list.clear()
                        average = 0
                        a = 0
                        for x in range(7):
                          for y in range(period):
                            a = pastyear_dewpoints[y+start+(x*24)+(dew_window-1)*24]
                            sum = sum+float(a)
                          average = sum/period
                          average_list.append(average)
                          sum = 0
                          average = 0
                        return average_list

                      def average_hum_data(start, period):
                        sum = 0
                        average_list = []
                        average_list.clear()
                        average = 0
                        a = 0
                        for x in range(7):
                          for y in range(period):
                            a = pastyear_humidity[y+start+(x*24)+(hum_window-1)*24]
                            sum = sum+float(a)
                          average = sum/period
                          average_list.append(average)
                          sum = 0
                          average = 0
                        return average_list

                      average_listm1 = average_temp_data(6,morning_hour)
                      average_listm2 = average_dewp_data(6,morning_hour)
                      average_listm3 = average_hum_data(6,morning_hour)

                      average_lista1 = average_temp_data(12,afternoon_hour)
                      average_lista2 = average_dewp_data(12,afternoon_hour)
                      average_lista3 = average_hum_data(12,afternoon_hour)

                      average_liste1 = average_temp_data(17,evening_hour)
                      average_liste2 = average_dewp_data(17,evening_hour)
                      average_liste3 = average_hum_data(17,evening_hour)

                      average_listen1 = average_temp_data(21,early_night_hour)
                      average_listen2 = average_dewp_data(21,early_night_hour)
                      average_listen3 = average_hum_data(21,early_night_hour)

                      average_listln1 = average_temp_data(0,late_night_hour)
                      average_listln2 = average_dewp_data(0,late_night_hour)
                      average_listln3 = average_hum_data(0,late_night_hour)


                      # Average of data (temperature, dew points, humidity) 2021

                      def c_average_temp_data(start, period):
                        sum = 0
                        average_list = []
                        average_list.clear()
                        average = 0
                        a = 0
                        for x in range(7):
                          for y in range(period):
                            a = twenty_four_current_temp[start+y+(x*24)]
                            sum = sum+float(a)
                          average = sum/period
                          average_list.append(average)
                          sum = 0
                          average = 0
                        return average_list

                      def c_average_dewp_data(start, period):
                        sum = 0
                        average_list = []
                        average_list.clear()
                        average = 0
                        a = 0
                        for x in range(7):
                          for y in range(period):
                            a = current_dew_point[start+y+(x*24)]
                            sum = sum+float(a)
                          average = sum/period
                          average_list.append(average)
                          sum = 0
                          average = 0
                        return average_list

                      def c_average_hum_data(start, period):
                        sum = 0
                        average_list = []
                        average_list.clear()
                        average = 0
                        a = 0
                        for x in range(7):
                          for y in range(period):
                            a = current_humidity[start+y+(x*24)]
                            sum = sum+float(a)
                          average = sum/period
                          average_list.append(average)
                          sum = 0
                          average = 0
                        return average_list

                      c_average_listm1 = c_average_temp_data(6,morning_hour)
                      c_average_listm2 = c_average_dewp_data(6,morning_hour)
                      c_average_listm3 = c_average_hum_data(6,morning_hour)

                      c_average_lista1 = c_average_temp_data(12,afternoon_hour)
                      c_average_lista2 = c_average_dewp_data(12,afternoon_hour)
                      c_average_lista3 = c_average_hum_data(12,afternoon_hour)

                      c_average_liste1 = c_average_temp_data(17,evening_hour)
                      c_average_liste2 = c_average_dewp_data(17,evening_hour)
                      c_average_liste3 = c_average_hum_data(17,evening_hour)

                      c_average_listen1 = c_average_temp_data(21,early_night_hour)
                      c_average_listen2 = c_average_dewp_data(21,early_night_hour)
                      c_average_listen3 = c_average_hum_data(21,early_night_hour)

                      c_average_listln1 = c_average_temp_data(0,late_night_hour)
                      c_average_listln2 = c_average_dewp_data(0,late_night_hour)
                      c_average_listln3 = c_average_hum_data(0,late_night_hour)
                      
                      # Prediction

                      def temp_prediction(past__t_v,current_t_v,start,period):
                        sum = 0
                        average = 0 
                        prediction_data = 0
                        variation = (past__t_v + current_t_v)/2.0
                        for x in range(period):
                          prediction_data = float(twenty_four_current_temp[24*6+start+x])
                          sum = sum + prediction_data
                        average = sum/period
                        preduction_data = average + variation
                        return preduction_data

                      def dewp_prediction(past__d_v,current_d_v,start,period):
                        sum = 0
                        average = 0 
                        prediction_data = 0
                        variation = (past__d_v + current_d_v)/2.0
                        for x in range(period):
                          prediction_data = float(current_dew_point[24*6+start+x])
                          sum = sum + prediction_data
                        average = sum/period
                        preduction_data = average + variation
                        return preduction_data

                      def hum_prediction(past__h_v,current_h_v,start,period):
                        sum = 0
                        average = 0 
                        prediction_data = 0
                        variation = (past__h_v + current_h_v)/2.0
                        for x in range(period):
                          prediction_data = float(current_humidity[24*6+start+x])
                          sum = sum + prediction_data
                        average = sum/period
                        preduction_data = average + variation
                        return preduction_data

                      ptm = temp_prediction(average_temp_variation(average_listm1),c_average_temp_variation(c_average_listm1),6,morning_hour)
                      pdm = dewp_prediction(average_dewp_variation(average_listm2),c_average_dewp_variation(c_average_listm2),6,morning_hour)
                      phm = hum_prediction(average_hum_variation(average_listm3),c_average_hum_variation(c_average_listm3),6,morning_hour)

                      pta = temp_prediction(average_temp_variation(average_lista1),c_average_temp_variation(c_average_lista1),12,afternoon_hour)
                      pda = dewp_prediction(average_dewp_variation(average_lista2),c_average_dewp_variation(c_average_lista2),12,afternoon_hour)
                      pha = hum_prediction(average_hum_variation(average_lista3),c_average_hum_variation(c_average_lista3),12,afternoon_hour)

                      pte = temp_prediction(average_temp_variation(average_liste1),c_average_temp_variation(c_average_liste1),17,evening_hour)
                      pde = dewp_prediction(average_dewp_variation(average_liste2),c_average_dewp_variation(c_average_liste2),17,evening_hour)
                      phe = hum_prediction(average_hum_variation(average_liste3),c_average_hum_variation(c_average_liste3),17,evening_hour)

                      pten = temp_prediction(average_temp_variation(average_listen1),c_average_temp_variation(c_average_listen1),21,early_night_hour)
                      pden = dewp_prediction(average_dewp_variation(average_listen2),c_average_dewp_variation(c_average_listen2),21,early_night_hour)
                      phen = hum_prediction(average_hum_variation(average_listen3),c_average_hum_variation(c_average_listen3),21,early_night_hour)

                      ptln = temp_prediction(average_temp_variation(average_listln1),c_average_temp_variation(c_average_listln1),0,late_night_hour)
                      pdln = dewp_prediction(average_dewp_variation(average_listln2),c_average_dewp_variation(c_average_listln2),0,late_night_hour)
                      phln = hum_prediction(average_hum_variation(average_listln3),c_average_hum_variation(c_average_listln3),0,late_night_hour)

                      print("The predicition temeperature for morning: " + str(ptm))
                      print("The predicition dew point for morning: " + str(pdm))
                      print("The predicition humnidity for morning: " + str(phm))

                      print("The predicition temeperature for afternoon: " + str(pta))
                      print("The predicition dew point for afternoon: " + str(pda))
                      print("The predicition humnidity for afternoon: " + str(pha))

                      print("The predicition temeperature for evening: " + str(pte))
                      print("The predicition dew point for evening: " + str(pde))
                      print("The predicition humnidity for evening: " + str(phe))

                      print("The predicition temeperature for early night: " + str(pten))
                      print("The predicition dew point for early night: " + str(pden))
                      print("The predicition humnidity for early night: " + str(phen))

                      print("The predicition temeperature for late night: " + str(ptln))
                      print("The predicition dew point for late night: " + str(pdln))
                      print("The predicition humnidity for late night: " + str(phln))

                      # Collect cloud coverage and preciptation percent
                      start_date = numOfDays(firstday_of_thisyear, cloud_c_data)
                      end_date = numOfDays(firstday_of_thisyear, cloud_c_data)
                      cloud_coverage = []
                      preciptation_percent = []
                      with open("Winnipeg_2021_3&4.csv") as fd:
                        reader = csv.reader(fd)
                        data = [row for idx, row in enumerate(reader) if idx in range(((start_date-1)*24+1),(end_date*24)+1) ]
                        for x in range(24): 
                          cloud_coverage.append(data[x][24])
                          preciptation_percent.append(data[x][25])

                      sum = 0
                      sum1 = 0
                      latecloud_average = 0
                      latepre_average = 0
                      for x in range(late_night_hour):
                        sum = sum + float(cloud_coverage[x])
                        sum1 = sum1 + float(preciptation_percent[x])
                      latecloud_average = sum/late_night_hour
                      latepre_average = sum1/late_night_hour
                      print("The cloud coverage for late night is: " + str(round(latecloud_average)))
                      print("The preciptation percent for late night is: " + str(latepre_average))

                      if (latepre_average < 30):
                        z1 = theta1*(latecloud_average-3.5)
                        h1 = (1/(1+np.e**(-1*z1)))
                        if (h1 >= 0.5):
                          print("It is very cloudy!")
                        else:
                          print("Clear skies or partly cloudy!")  

                      else:
                        z2 = theta2*(latecloud_average-6.5)
                        h2 = (1/(1+np.e**(-1*z2)))
                        if (ptln <= 0):
                          if (h2 >= 0.5):
                            print("It is heavily snowing!")
                          else:
                            print("It is lightly snowing!")  
                        else:
                          if (h2>0.5):
                            print("It is heavily raining!")
                          else:
                            print("It is lightly raining!")                           

                      sum = 0
                      sum1 = 0
                      morningcloud_average = 0
                      morningpre_average = 0
                      for x in range(morning_hour):
                        sum = sum + float(cloud_coverage[6+x])
                        sum1 = sum1 + float(preciptation_percent[6+x])
                      morningcloud_average = sum/morning_hour
                      morningpre_average = sum1/morning_hour
                      print("The cloud coverage for morning is: " + str(round(morningcloud_average)))
                      print("The preciptation percent for morning is: " + str(morningpre_average))
                      if (morningpre_average < 30):
                        z1 = theta1*(morningcloud_average-3.5)
                        h1 = (1/(1+np.e**(-1*z1)))
                        if (h1 >= 0.5):
                          print("It is very cloudy!")
                        else:
                          print("It is sunny or partly cloudy!")  

                      else:
                        z2 = theta2*(morningcloud_average-6.5)
                        h2 = (1/(1+np.e**(-1*z2)))
                        if (ptm <= 0):
                          if (h2 >= 0.5):
                            print("It is heavily snowing!")
                          else:
                            print("It is lightly snowing!")  
                        else:
                          if (h2>0.5):
                            print("It is heavily raining!")
                          else:
                            print("It is lightly raining!")   

                      sum = 0
                      sum1 = 0
                      aftercloud_average = 0
                      afterpre_average = 0
                      for x in range(afternoon_hour):
                        sum = sum + float(cloud_coverage[12+x])
                        sum1 = sum1 + float(preciptation_percent[12+x])
                      aftercloud_average = sum/afternoon_hour
                      afterpre_average = sum1/afternoon_hour
                      print("The cloud coverage for afternoon is: " + str(round(aftercloud_average)))
                      print("The preciptation percent for afternoon is: " + str(afterpre_average))
                      if (afterpre_average < 30):
                        z1 = theta1*(aftercloud_average-3.5)
                        h1 = (1/(1+np.e**(-1*z1)))
                        if (h1 >= 0.5):
                          print("It is very cloudy!")
                        else:
                          print("It is sunny or partly cloudy!")    

                      else:
                        z2 = theta2*(aftercloud_average-6.5)
                        h2 = (1/(1+np.e**(-1*z2)))
                        if (pta <= 0):
                          if (h2 >= 0.5):
                            print("It is heavily snowing!")
                          else:
                            print("It is lightly snowing!")  
                        else:
                          if (h2>0.5):
                            print("It is heavily raining!")
                          else:
                            print("It is lightly raining!") 

                      sum = 0
                      sum1 = 0
                      evencloud_average = 0
                      evenpre_average = 0
                      for x in range(evening_hour):
                        sum = sum + float(cloud_coverage[17+x])
                        sum1 = sum1 + float(preciptation_percent[17+x])
                      evencloud_average = sum/evening_hour
                      evenpre_average = sum1/evening_hour
                      print("The cloud coverage for evening is: " + str(round(evencloud_average)))
                      print("The preciptation percent for evening is: " + str(evenpre_average))

                      if (evenpre_average < 30):
                        z1 = theta1*(evencloud_average-3.5)
                        h1 = (1/(1+np.e**(-1*z1)))
                        if (h1 >= 0.5):
                          print("It is very cloudy!")
                        else:
                          print("It is sunny or partly cloudy!")    

                      else:
                        z2 = theta2*(evencloud_average-6.5)
                        h2 = (1/(1+np.e**(-1*z2)))
                        if (pte <= 0):
                          if (h2 >= 0.5):
                            print("It is heavily snowing!")
                          else:
                            print("It is lightly snowing!")  
                        else:
                          if (h2>0.5):
                            print("It is heavily raining!")
                          else:
                            print("It is lightly raining!") 

                      sum = 0
                      sum1 = 0
                      earlycloud_average = 0
                      earlypre_average = 0
                      for x in range(early_night_hour):
                        sum = sum + float(cloud_coverage[21+x])
                        sum1 = sum1 + float(preciptation_percent[21+x])
                      earlycloud_average = sum/early_night_hour
                      earlypre_average = sum1/early_night_hour
                      print("The cloud coverage for early night is: " + str(round(earlycloud_average)))
                      print("The preciptation percent for early night is: " + str(earlypre_average))

                      if (earlypre_average < 30):
                        z1 = theta1*(earlycloud_average-3.5)
                        h1 = (1/(1+np.e**(-1*z1)))
                        if (h1 >= 0.5):
                          print("It is very cloudy!")
                        else:
                          print("Clear Skies or partly cloudy!")    

                      else:
                        z2 = theta2*(earlycloud_average -6.5)
                        h2 = (1/(1+np.e**(-1*z2)))
                        if (pten <= 0):
                          if (h2 >= 0.5):
                            print("It is heavily snowing!")
                          else:
                            print("It is lightly snowing!")  
                        else:
                          if (h2>0.5):
                            print("It is heavily raining!")
                          else:
                            print("It is lightly raining!") 

                      # Collect todays data for comparesion
                      start_date = numOfDays(firstday_of_thisyear, comparision_data)
                      end_date = numOfDays(firstday_of_thisyear, comparision_data)
                      today_temp = []
                      today_dewpoints = []
                      today_humidity = []
                      with open("Winnipeg_2021_3&4.csv") as fd:
                        reader = csv.reader(fd)
                        data = [row for idx, row in enumerate(reader) if idx in range(((start_date-1)*24+1),(end_date*24)+1) ]
                        for x in range(24): 
                          today_temp.append(data[x][9])
                          today_dewpoints.append(data[x][11])
                          today_humidity.append(data[x][13])

                      def average_T(start, period):
                        sum = 0
                        average_list = []
                        average_list.clear()
                        average = 0
                        a = 0
                        for x in range(period):
                          a = today_temp[start+x]
                          sum = sum+float(a)
                        average = sum/period
                        average_list.append(average)
                        sum = 0
                        average = 0
                        return average_list

                      def average_D(start, period):
                        sum = 0
                        average_list = []
                        average_list.clear()
                        average = 0
                        a = 0
                        for x in range(period):
                          a = today_dewpoints[start+x]
                          sum = sum+float(a)
                        average = sum/period
                        average_list.append(average)
                        sum = 0
                        average = 0
                        return average_list

                      def average_H(start, period):
                        sum = 0
                        average_list = []
                        average_list.clear()
                        average = 0
                        a = 0
                        for x in range(period):
                          a = today_humidity[start+x]
                          sum = sum+float(a)
                        average = sum/period
                        average_list.append(average)
                        sum = 0
                        average = 0
                        return average_list

                      average_listm1 = average_T(6,morning_hour)
                      average_listm2 = average_D(6,morning_hour)
                      average_listm3 = average_H(6,morning_hour)

                      average_lista1 = average_T(12,afternoon_hour)
                      average_lista2 = average_D(12,afternoon_hour)
                      average_lista3 = average_H(12,afternoon_hour)

                      average_liste1 = average_T(17,evening_hour)
                      average_liste2 = average_dewp_data(17,evening_hour)
                      average_liste3 = average_H(17,evening_hour)

                      average_listen1 = average_T(21,early_night_hour)
                      average_listen2 = average_D(21,early_night_hour)
                      average_listen3 = average_H(21,early_night_hour)

                      average_listln1 = average_T(0,late_night_hour)
                      average_listln2 = average_D(0,late_night_hour)
                      average_listln3 = average_H(0,late_night_hour)

                      print(f'Morning temperature: prediction: {ptm}, Actual: {average_listm1[0]}, Accuary percent: {abs(100 - abs(((ptm-average_listm1[0])/(average_listm1[0]))) * 100.0)}')
                      print(f'Morning dewpoint: prediction: {pdm}, Actual: {average_listm2[0]}, Accuary percent: {abs(100 -  abs(((pdm-average_listm2[0])/(average_listm2[0]))) * 100.0)}')
                      print(f'Morning hummidity: prediction: {phm}, Actual: {average_listm3[0]}, Accuary percent: {abs(100 - abs(((phm-average_listm3[0])/(average_listm3[0]))) * 100.0)}')
                      print("")
                      print(f'Afternoon temperature: prediction: {pta}, Actual: {average_lista1[0]}, Accuary percent: {abs(100 - abs(((pta-average_lista1[0])/(average_lista1[0]))) * 100.0)}')
                      print(f'Afternoon dewpoint: prediction: {pda}, Actual: {average_lista2[0]}, Accuary percent: {abs(100 - abs(((pda-average_lista2[0])/(average_lista2[0]))) * 100.0)}')
                      print(f'Afternoon hummidity: prediction: {pha}, Actual: {average_lista3[0]}, Accuary percent: {abs(100 - abs(((pha-average_lista3[0])/(average_lista3[0]))) * 100.0)}')
                      print("")
                      print(f'Evening temperature: prediction: {pte}, Actual: {average_liste1[0]}, Accuary percent: {abs(100 - abs(((pte-average_liste1[0])/(average_liste1[0]))) * 100.0)}')
                      print(f'Evening dewpoint: prediction: {pde}, Actual: {average_liste2[0]}, Accuary percent: {abs(100 - abs(((pde-average_liste2[0])/(average_liste2[0]))) * 100.0)}')
                      print(f'Evening hummidity: prediction: {phe}, Actual: {average_liste3[0]}, Accuary percent: {abs(100 - abs(((phe-average_liste3[0])/(average_liste3[0]))) * 100.0)}')
                      print("")
                      print(f'Early night temperature: prediction: {pten}, Actual: {average_listen1[0]}, Accuary percent: {abs(100 - abs(((pten-average_listen1[0])/(average_listen1[0]))) * 100.0)}')
                      print(f'Early night dewpoint: prediction: {pden}, Actual: {average_listen2[0]}, Accuary percent: {abs(100 - abs(((pden-average_listen2[0])/(average_listen2[0]))) * 100.0)}')
                      print(f'Early night hummidity: prediction: {phen}, Actual: {average_listen3[0]}, Accuary percent: {abs(100 - abs(((phen-average_listen3[0])/(average_listen3[0]))) * 100.0)}')
                      print("")
                      print(f'Late night temperature: prediction: {ptln}, Actual: {average_listln1[0]}, Accuary percent: {abs(100 - abs(((ptln-average_listln1[0])/(average_listln1[0]))) * 100.0)}')
                      print(f'Late night dewpoint: prediction: {pdln}, Actual: {average_listln2[0]}, Accuary percent: {abs(100 - abs(((pdln-average_listln2[0])/(average_listln2[0]))) * 100.0)}')
                      print(f'Late night hummidity: prediction: {phln}, Actual: {average_listln3[0]}, Accuary percent: {abs(100 - abs(((phln-average_listln3[0])/(average_listln3[0]))) * 100.0)}')
                      print("")

                      print("--- %s seconds ---" % (time.time() - start_time))

          else:
                      run = False

!cat /proc/cpuinfo